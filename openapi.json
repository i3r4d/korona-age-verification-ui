{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "KORONA.cloud API v3",
    "description" : "Our api provides access to our cloud services",
    "termsOfService" : "https://support.korona.de/agb/",
    "contact" : {
      "url" : "https://167.koronacloud.com",
      "email" : "support@koronapos.com"
    },
    "license" : {
      "name" : "KORONA.cloud API License",
      "url" : "https://support.korona.de/agb/"
    },
    "version" : "3.5.47"
  },
  "servers" : [ {
    "url" : "https://167.koronacloud.com/web/api/v3"
  } ],
  "tags" : [ {
    "name" : "accounts",
    "description" : "This API category refers to the management of \"accounts\" in accounting, wich refer to the financial records that track the transactions of a business."
  }, {
    "name" : "additional receipt info types",
    "description" : "This API category refers to the management of additional information types that can be included in receipts."
  }, {
    "name" : "assortments",
    "description" : "This API category refers to the management of assortments, which are collections of related products that are sold together."
  }, {
    "name" : "ticketing",
    "description" : "This API category refers to the management of ticketing for events or other activities."
  }, {
    "name" : "cashier roles",
    "description" : "This API category refers to the management of different roles and permissions for cashiers in a point-of-sale system."
  }, {
    "name" : "cashiers",
    "description" : "This API category refers to the management of cashiers, including their login credentials and other related details."
  }, {
    "name" : "cashier verification requirements",
    "description" : "This API category refers to the management of requirements for cashiers on a point-of-sale system for example, verifying the identity or age of a customer."
  }, {
    "name" : "commodity groups",
    "description" : "This API category refers to the management of groups of related products or services."
  }, {
    "name" : "contra accounts",
    "description" : "This API category refers to the management of contra accounts, which are used to offset the balance of other accounts."
  }, {
    "name" : "cost centers",
    "description" : "This API category refers to the management of cost centers, which are used to track expenses related to specific departments or projects."
  }, {
    "name" : "coupons",
    "description" : "This API category refers to the management of coupons, including their codes, names, and other related details."
  }, {
    "name" : "currencies",
    "description" : "This API category refers to the management of different currencies and their names, symbols, denominations and exchange rates."
  }, {
    "name" : "customer display configurations",
    "description" : "This API category refers to the management of settings for customer-facing displays, such as those used in a retail setting."
  }, {
    "name" : "customer groups",
    "description" : "This API category refers to the management of groups of customers with similar characteristics, such as their buying habits or demographics."
  }, {
    "name" : "customer orders",
    "description" : "This API category refers to the management of orders placed by customers, including their details and related information"
  }, {
    "name" : "customers",
    "description" : "This API category refers to the management of customer information, including their contact details and other settings, such as the use of an email for digital receipt."
  }, {
    "name" : "data exchange configurations",
    "description" : "This API category refers to the management of data exchange configurations."
  }, {
    "name" : "delivery notes",
    "description" : "This API category refers to the management of delivery notes, which are documents used to confirm the delivery of goods or services. This feature requires the use of KORONA.invoicing."
  }, {
    "name" : "device configuration variables",
    "description" : "This API category refers to the management of settings and configurations for hardware devices used in a point-of-sale system."
  }, {
    "name" : "discount configurations",
    "description" : "This API category refers to the management of settings for different types of discounts that can be applied to purchases."
  }, {
    "name" : "dispatch notifications",
    "description" : "This API category refers to the management of notifications related to the dispatch of goods or services. This feature requires the use of KORONA.retail."
  }, {
    "name" : "economic zones",
    "description" : "This API category refers to the management of different economic zones, such as those with different tax rates or trade regulations."
  }, {
    "name" : "external system calls",
    "description" : "This API category refers to the ability to make calls to external systems, such as payment processors or shipping providers."
  }, {
    "name" : "fiscal units",
    "description" : "This API category refers to the management of fiscal units, which are used to track financial transactions for tax reporting purposes."
  }, {
    "name" : "images",
    "description" : "This API category refers to the management of images used in various contexts, such as product listings or marketing materials."
  }, {
    "name" : "info texts",
    "description" : "This API category refers to the management of text-based information used in various contexts, such as on receipts or in marketing materials."
  }, {
    "name" : "inventories",
    "description" : "This API category refers to the management of inventory levels for different products or services. This feature requires the use of KORONA.retail."
  }, {
    "name" : "item sequences",
    "description" : "APIs related to the management of item sequences. (KORONA.food required)"
  }, {
    "name" : "korona account",
    "description" : "APIs related to the management of the KORONA.studio account, which includes the company contact details and other settings."
  }, {
    "name" : "languages",
    "description" : "APIs related to the management of the accounts languages."
  }, {
    "name" : "loyalty cards",
    "description" : "APIs related to the management of the loyalty cards."
  }, {
    "name" : "messages",
    "description" : "APIs related to the management of messages thad can be send to the point-of-sale system."
  }, {
    "name" : "number range configurations",
    "description" : "This API category refers to the management of number range configurations, which are used to trigger different actions if matching codes are scanned on the point-of-sale system"
  }, {
    "name" : "order portal suppliers",
    "description" : "This API category refers to the management of order portal suppliers."
  }, {
    "name" : "organizational units",
    "description" : "APIs related to the management of organizational units"
  }, {
    "name" : "payment method categories",
    "description" : "APIs related to the management of payment method categories"
  }, {
    "name" : "payment methods",
    "description" : "This API category refers to the management of payment methods, such as cash, credit cards, prepaid cards, and other."
  }, {
    "name" : "pos button layouts",
    "description" : "This API category refers to the management of settings and configurations for button layouts on the point-of-sale user interface."
  }, {
    "name" : "pos page layout configurations",
    "description" : "This API category refers to the management of settings and configurations for page layout configurations on the point-of-sale user interface."
  }, {
    "name" : "pos profiles",
    "description" : "This API category refers to the management of settings and configurations of different point-of-sale system profiles, which include their button and page layouts."
  }, {
    "name" : "points of sale",
    "description" : "This API category refers to the management of point-of-sale systems and their related details."
  }, {
    "name" : "price groups",
    "description" : "This API category refers to the management of price groups and their related details."
  }, {
    "name" : "price rules",
    "description" : "This API category refers to the management of price rules and their related details."
  }, {
    "name" : "prices",
    "description" : "This API category refers to the management of product prices and their related details."
  }, {
    "name" : "products",
    "description" : "This API category refers to the management of products and their related details."
  }, {
    "name" : "production types",
    "description" : "This API category refers to the management of production types and their related details. Production types are a kind of action thad can be assigned to products, buttons or can be triggert by a action on the point of sale system."
  }, {
    "name" : "promotions",
    "description" : "This API category refers to the management of promotions and their related details."
  }, {
    "name" : "receipt layout configurations",
    "description" : "This API category refers to the management of receipt layouts and their related details."
  }, {
    "name" : "receipts",
    "description" : "This API category refers to the retrieval and query of receipts, including their booking time, sales items, and other related details."
  }, {
    "name" : "rentals",
    "description" : "This API category refers to the management of rentals. This feature requires the use of KORONA.invoicing."
  }, {
    "name" : "report files",
    "description" : "This API category refers to the management and configuration of report files that can be produced from receipts and their sales items."
  }, {
    "name" : "revenue accounts",
    "description" : "This API category refers to the management of revenue accounts, which are used to track the income earned by a business through the sale of goods or services."
  }, {
    "name" : "sales taxes",
    "description" : "This API category refers to the management of sales taxes, including their economic zone, tax-rate and other related details."
  }, {
    "name" : "sectors",
    "description" : "This API category refers to the management of sectors of related products or services, including their sales-taxes."
  }, {
    "name" : "special price configurations",
    "description" : "This API category refers to the management of special prices, which are used to configure time based advertising prices."
  }, {
    "name" : "statistics",
    "description" : "This API category refers to the retrieval and query of statistics, including revenue data, top sellers, and other related details."
  }, {
    "name" : "stock adjustments",
    "description" : "APIs related to the management of stock adjustments, which are used to adjust inventory items for a store or a warehouse."
  }, {
    "name" : "stock orders",
    "description" : "APIs related to the management of stock orders, which are used to order new inventory items for a store or a warehouse. This feature requires the use of KORONA.retail."
  }, {
    "name" : "stock receipts",
    "description" : "APIs related to the management of stock receipts, which are used to record the reception of new inventory items. This feature requires the use of KORONA.retail."
  }, {
    "name" : "store orders",
    "description" : "APIs related to the management of store orders, which are used to order items for a specific store or location."
  }, {
    "name" : "suppliers",
    "description" : "APIs related to the management of suppliers, which includes the creation, modification, and retrieval of supplier information."
  }, {
    "name" : "tags",
    "description" : "APIs related to the management of tags, which are used to categorize products and other entities in the system."
  }, {
    "name" : "time tracking",
    "description" : "APIs related to the management of time tracking, which includes the creation, modification, and retrieval of time tracking information."
  }, {
    "name" : "user roles",
    "description" : "APIs related to the management of user roles, which includes the creation, modification, and retrieval of user roles information."
  }, {
    "name" : "users",
    "description" : "APIs related to the management of users, which includes the creation, modification, and retrieval of user information."
  }, {
    "name" : "voucher configurations",
    "description" : "APIs related to the management of voucher configurations, which includes the creation, modification, and retrieval of voucher configuration information."
  }, {
    "name" : "vouchers",
    "description" : "APIs related to the management of vouchers, which are used to offer discounts or promotions to customers."
  }, {
    "name" : "voucher transactions",
    "description" : "APIs related to the management of voucher transactions, which includes the creation, modification, and retrieval of voucher transaction information."
  } ],
  "paths" : {
    "/accounts/{koronaAccountId}/accounts" : {
      "get" : {
        "tags" : [ "accounts" ],
        "description" : "lists all accounts",
        "operationId" : "getAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListAccount"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "accounts" ],
        "description" : "adds a batch of new accounts",
        "operationId" : "addAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "accounts" ],
        "description" : "deletes a batch of accounts",
        "operationId" : "deleteAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing accounts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "accounts" ],
        "description" : "updates a batch of accounts; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/accounts/{accountId}" : {
      "get" : {
        "tags" : [ "accounts" ],
        "description" : "returns a single account",
        "operationId" : "getAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "accounts" ],
        "description" : "deletes the single account",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "accounts" ],
        "description" : "updates the single account; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/additionalReceiptInfoTypes" : {
      "get" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "lists all additional receipt info types",
        "operationId" : "getAdditionalReceiptInfoTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListAdditionalReceiptInfoType"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "adds a batch of new additional receipt infos",
        "operationId" : "addAdditionalReceiptInfoTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new additional receipt infos",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "deletes a batch of additional receipt info types",
        "operationId" : "deleteAdditionalReceiptInfoTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing additional receipt infos (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "updates a batch of additional receipt info types; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateAdditionalReceiptInfoTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing additional receipt infos",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/additionalReceiptInfoTypes/{additionalReceiptInfoTypeId}" : {
      "get" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "returns the single additional receipt info type",
        "operationId" : "getAdditionalReceiptInfoType",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "additionalReceiptInfoTypeId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "deletes the single additional receipt info type",
        "operationId" : "deleteAdditionalReceiptInfoType",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "additionalReceiptInfoTypeId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "additional receipt info types" ],
        "description" : "updates the single additional receipt info type; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateAdditionalReceiptInfoType",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "additionalReceiptInfoTypeId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/assortments" : {
      "get" : {
        "tags" : [ "assortments" ],
        "description" : "lists all assortments",
        "operationId" : "getAssortments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListAssortment"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "assortments" ],
        "description" : "adds a batch of new assortments",
        "operationId" : "addAssortments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new assortments",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Assortment"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "assortments" ],
        "description" : "deletes a batch of assortments",
        "operationId" : "deleteAssortments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing assortments (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Assortment"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "assortments" ],
        "description" : "updates a batch of assortments",
        "operationId" : "updateAssortments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing assortments (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Assortment"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/assortments/{assortmentId}" : {
      "get" : {
        "tags" : [ "assortments" ],
        "description" : "returns the single assortment",
        "operationId" : "getAssortment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assortmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Assortment"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "assortments" ],
        "description" : "deletes the single assortment",
        "operationId" : "deleteAssortment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assortmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "assortments" ],
        "description" : "updates the single assortment",
        "operationId" : "updateAssortment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assortmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the assortment",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Assortment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/attendances" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "lists all attendances",
        "operationId" : "getAttendances",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListAttendance"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "updates/adds attendances",
        "operationId" : "addOrUpdateAttendances",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of attendances",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Attendance"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/attendances/{attendanceId}" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "returns the single attendance",
        "operationId" : "getAttendance",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attendanceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attendance"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "cancel the attendance",
        "operationId" : "cancelAttendance",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attendanceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashierRoles" : {
      "get" : {
        "tags" : [ "cashier roles" ],
        "description" : "lists all cashier roles",
        "operationId" : "getCashierRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCashierRole"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "cashier roles" ],
        "description" : "adds a batch of new cashier roles",
        "operationId" : "addCashierRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new cashier roles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cashier roles" ],
        "description" : "deletes a batch of cashier roles",
        "operationId" : "deleteCashierRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cashier roles (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cashier roles" ],
        "description" : "updates a batch of cashier roles",
        "operationId" : "updateCashierRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cashier roles (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashierRoles/{cashierRoleId}" : {
      "get" : {
        "tags" : [ "cashier roles" ],
        "description" : "returns the single cashier role",
        "operationId" : "getCashierRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CashierRole"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cashier roles" ],
        "description" : "deletes the single cashier role",
        "operationId" : "deleteCashierRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cashier roles" ],
        "description" : "updates the single cashier role",
        "operationId" : "updateCashierRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the cashier role",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CashierRole"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashiers" : {
      "get" : {
        "tags" : [ "cashiers" ],
        "description" : "lists all cashiers",
        "operationId" : "getCashiers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "displayCashierCredentials",
          "in" : "query",
          "description" : "display cashier credentials loginCode and loginPassword as (HASH|PLAIN|NONE)",
          "schema" : {
            "type" : "string",
            "enum" : [ "HASH", "PLAIN", "NONE" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierNumberOrganizationalUnit",
          "in" : "query",
          "description" : "organizational unit in cashier.organizationalUnitSpecificNumbers",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCashier"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "cashiers" ],
        "description" : "adds a batch of new cashiers",
        "operationId" : "addCashiers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new cashiers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Cashier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cashiers" ],
        "description" : "deletes a batch of cashiers",
        "operationId" : "deleteCashiers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cashiers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Cashier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cashiers" ],
        "description" : "updates a batch of cashiers; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateCashiers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing cashiers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Cashier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashiers/{cashierId}" : {
      "get" : {
        "tags" : [ "cashiers" ],
        "description" : "returns the single cashier",
        "operationId" : "getCashier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "displayCashierCredentials",
          "in" : "query",
          "description" : "display cashier credentials loginCode and loginPassword as (HASH|PLAIN|NONE)",
          "schema" : {
            "type" : "string",
            "enum" : [ "HASH", "PLAIN", "NONE" ]
          }
        }, {
          "name" : "cashierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Cashier"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cashiers" ],
        "description" : "deletes the single cashier",
        "operationId" : "deleteCashier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cashiers" ],
        "description" : "updates the single cashier; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateCashier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the cashier",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Cashier"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashierVerificationRequirements" : {
      "get" : {
        "tags" : [ "cashier verification requirements" ],
        "description" : "lists all cashier verification requirements",
        "operationId" : "getCashierVerificationRequirements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCashierVerificationRequirement"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "cashier verification requirements" ],
        "description" : "adds a batch of new cashier verification requirements",
        "operationId" : "addCashierVerificationRequirements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new cashier verification requirements",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierVerificationRequirement"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cashier verification requirements" ],
        "description" : "deletes a batch of cashier verification requirements",
        "operationId" : "deleteCashierVerificationRequirements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cashier verification requirements (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierVerificationRequirement"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cashier verification requirements" ],
        "description" : "updates a batch of cashier verification requirements",
        "operationId" : "updateCashierVerificationRequirements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cashier verification requirements (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CashierVerificationRequirement"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/cashierVerificationRequirements/{cashierVerificationRequirementId}" : {
      "get" : {
        "tags" : [ "cashier verification requirements" ],
        "description" : "returns the single cashier verification requirement",
        "operationId" : "getCashierVerificationRequirement",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashierVerificationRequirementId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CashierVerificationRequirement"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/commodityGroups" : {
      "get" : {
        "tags" : [ "commodity groups" ],
        "description" : "lists all commodity groups",
        "operationId" : "getCommodityGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCommodityGroup"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "commodity groups" ],
        "description" : "adds a batch of new commodity groups",
        "operationId" : "addCommodityGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new commodity groups",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CommodityGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "commodity groups" ],
        "description" : "deletes a batch of commodity groups",
        "operationId" : "deleteCommodityGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing commodity groups (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CommodityGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "commodity groups" ],
        "description" : "updates a batch of commodity groups",
        "operationId" : "updateCommodityGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing commodity groups (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CommodityGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}" : {
      "get" : {
        "tags" : [ "commodity groups" ],
        "description" : "returns the single commodity group",
        "operationId" : "getCommodityGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commodityGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CommodityGroup"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "commodity groups" ],
        "description" : "deletes the single commodity group",
        "operationId" : "deleteCommodityGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commodityGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "commodity groups" ],
        "description" : "updates the single commodity group",
        "operationId" : "updateCommodityGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commodityGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the commodity group",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CommodityGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/contraAccounts" : {
      "get" : {
        "tags" : [ "contra accounts" ],
        "description" : "lists all contra accounts",
        "operationId" : "getContraAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListContraAccount"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "contra accounts" ],
        "description" : "adds a batch of new contra accounts",
        "operationId" : "addContraAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new contra accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ContraAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "contra accounts" ],
        "description" : "deletes a batch of contra accounts",
        "operationId" : "deleteContraAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing contra accounts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ContraAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "contra accounts" ],
        "description" : "updates a batch of contra accounts; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateContraAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing contra accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ContraAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/contraAccounts/{contraAccountId}" : {
      "get" : {
        "tags" : [ "contra accounts" ],
        "description" : "returns a single contra account",
        "operationId" : "getContraAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contraAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContraAccount"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "contra accounts" ],
        "description" : "deletes the single contra account",
        "operationId" : "deleteContraAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contraAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "contra accounts" ],
        "description" : "updates the single contra account; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateContraAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "contraAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the contra account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ContraAccount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/costCenters" : {
      "get" : {
        "tags" : [ "cost centers" ],
        "description" : "lists all cost centers",
        "operationId" : "getCostCenters",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCostCenter"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "cost centers" ],
        "description" : "adds a batch of new cost centers",
        "operationId" : "addCostCenters",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new cost centers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cost centers" ],
        "description" : "deletes a batch of cost centers",
        "operationId" : "deleteCostCenters",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing cost centers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cost centers" ],
        "description" : "updates a batch of cost centers; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateCostCenters",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing cost centers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CostCenter"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/costCenters/{costCenterId}" : {
      "get" : {
        "tags" : [ "cost centers" ],
        "description" : "returns a single cost center",
        "operationId" : "getCostCenter",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "costCenterId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CostCenter"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "cost centers" ],
        "description" : "deletes the single cost center",
        "operationId" : "deleteCostCenter",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "costCenterId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "cost centers" ],
        "description" : "updates the single cost center; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateCostCenter",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "costCenterId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the cost center",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CostCenter"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/coupons/{couponId}" : {
      "get" : {
        "tags" : [ "coupons" ],
        "description" : "returns the single coupon",
        "operationId" : "getCoupon",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couponId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Coupon"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/coupons" : {
      "get" : {
        "tags" : [ "coupons" ],
        "description" : "lists all coupons",
        "operationId" : "getCoupons",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCoupon"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/ticketCreation" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "creation tasks, personalization will always be empty for technical reasons",
        "operationId" : "getCreationTasks",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "creationTimeFrom",
          "in" : "query",
          "description" : "creation time from",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "creationTimeTo",
          "in" : "query",
          "description" : "creation time to",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "description" : "creation task statuses",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "PREPARED", "RUNNING", "FINISHED", "FAILED" ]
            }
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCreationTask"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "adds a creation task",
        "operationId" : "addCreationTask",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "a single ticket creation task",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreationTask"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddOrUpdateResult"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/currencies" : {
      "get" : {
        "tags" : [ "currencies" ],
        "description" : "lists all currencies",
        "operationId" : "getCurrencies",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCurrency"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "currencies" ],
        "description" : "adds a batch of new currencies",
        "operationId" : "addCurrencies",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new currencies",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Currency"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "currencies" ],
        "description" : "deletes a batch of currencies",
        "operationId" : "deleteCurrencies",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing currencies (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Currency"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "currencies" ],
        "description" : "updates a batch of currencies",
        "operationId" : "updateCurrencies",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing currencies (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Currency"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/currencies/{currencyId}" : {
      "get" : {
        "tags" : [ "currencies" ],
        "description" : "returns the single currency",
        "operationId" : "getCurrency",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "currencyId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Currency"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerDisplayConfigurations" : {
      "get" : {
        "tags" : [ "customer display configurations" ],
        "description" : "lists all customer display configurations",
        "operationId" : "getCustomerDisplayConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCustomerDisplayConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customer display configurations" ],
        "description" : "adds a batch of new customer display configurations",
        "operationId" : "addCustomerDisplayConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new customer display configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerDisplayConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer display configurations" ],
        "description" : "deletes a batch of customer display configurations",
        "operationId" : "deleteCustomerDisplayConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing customer display configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerDisplayConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customer display configurations" ],
        "description" : "updates a batch of customer display configurations; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateCustomerDisplayConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing customer display configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerDisplayConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerDisplayConfigurations/{customerDisplayConfigurationId}" : {
      "get" : {
        "tags" : [ "customer display configurations" ],
        "description" : "returns the single customer display configuration",
        "operationId" : "getCustomerDisplayConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerDisplayConfigurationId",
          "in" : "path",
          "description" : "the number of the customer display configuration",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerDisplayConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer display configurations" ],
        "description" : "deletes the single customer display configuration",
        "operationId" : "deleteCustomerDisplayConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerDisplayConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerGroups" : {
      "get" : {
        "tags" : [ "customer groups" ],
        "description" : "lists all customer groups",
        "operationId" : "getCustomerGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCustomerGroup"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customer groups" ],
        "description" : "adds a batch of new customer groups",
        "operationId" : "addCustomerGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new customer groups",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer groups" ],
        "description" : "deletes a batch of customer groups",
        "operationId" : "deleteCustomerGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing customer groups (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customer groups" ],
        "description" : "updates a batch of customer groups; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateCustomerGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing customer groups",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerGroups/{customerGroupId}" : {
      "get" : {
        "tags" : [ "customer groups" ],
        "description" : "returns the single customer group",
        "operationId" : "getCustomerGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerGroup"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer groups" ],
        "description" : "deletes the single customer group",
        "operationId" : "deleteCustomerGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customer groups" ],
        "description" : "updates the single customer group; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateCustomerGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the customer group",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerOrders" : {
      "get" : {
        "tags" : [ "customer orders" ],
        "description" : "lists all customer orders",
        "operationId" : "getCustomerOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minPickUpTime",
          "in" : "query",
          "description" : "min (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxPickUpTime",
          "in" : "query",
          "description" : "max (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "customer id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSale",
          "in" : "query",
          "description" : "point of sale",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashier",
          "in" : "query",
          "description" : "cashier id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "finalized",
          "in" : "query",
          "description" : "load only objects with this finalized status",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCustomerOrder"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customer orders" ],
        "description" : "adds a batch of new customer orders",
        "operationId" : "addCustomerOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of new customer orders",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerOrder"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customer orders" ],
        "description" : "updates a batch of customer orders; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateCustomerOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing customer orders",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CustomerOrder"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customerOrders/{customerOrderId}" : {
      "get" : {
        "tags" : [ "customer orders" ],
        "description" : "returns the single customer order",
        "operationId" : "getCustomerOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerOrder"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customer orders" ],
        "description" : "deletes the single customer order",
        "operationId" : "deleteCustomerOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customer orders" ],
        "description" : "updates the single customer order",
        "operationId" : "updateCustomerOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the customer order",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerOrder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customers" : {
      "get" : {
        "tags" : [ "customers" ],
        "description" : "lists all customers",
        "operationId" : "getCustomers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "name of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListCustomer"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "customers" ],
        "description" : "adds a batch of new customers",
        "operationId" : "addCustomers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new customers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customers" ],
        "description" : "deletes a batch of customers",
        "operationId" : "deleteCustomers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing customers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customers" ],
        "description" : "updates a batch of customers",
        "operationId" : "updateCustomers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing customers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/customers/{customerId}" : {
      "get" : {
        "tags" : [ "customers" ],
        "description" : "returns the single customer",
        "operationId" : "getCustomer",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "customers" ],
        "description" : "deletes the single customer",
        "operationId" : "deleteCustomer",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "customers" ],
        "description" : "updates the single customer",
        "operationId" : "updateCustomer",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the customer",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dataExchangeConfigurations/{dataExchangeConfigurationType}" : {
      "get" : {
        "tags" : [ "data exchange configurations" ],
        "description" : "returns the single data exchange configuration",
        "operationId" : "getDataExchangeConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataExchangeConfigurationType",
          "in" : "path",
          "description" : "data exchange configuration type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "KORONA_ENTRY" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataExchangeConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dataExchangeConfigurations" : {
      "get" : {
        "tags" : [ "data exchange configurations" ],
        "description" : "lists all data exchange configurations",
        "operationId" : "getDataExchangeConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDataExchangeConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deliveryNotes" : {
      "get" : {
        "tags" : [ "delivery notes" ],
        "description" : "lists all delivery notes",
        "operationId" : "getDeliveryNotes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minDeliveryTime",
          "in" : "query",
          "description" : "min (inclusive) delivery time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxDeliveryTime",
          "in" : "query",
          "description" : "max (inclusive) delivery time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "pointOfSale",
          "in" : "query",
          "description" : "point of sale",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "customer id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDeliveryNote"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "delivery notes" ],
        "description" : "adds delivery notes",
        "operationId" : "addDeliveryNotes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DeliveryNote"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/book" : {
      "patch" : {
        "tags" : [ "delivery notes" ],
        "description" : "book the single delivery note",
        "operationId" : "bookDeliveryNote",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deliveryNoteId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize" : {
      "patch" : {
        "tags" : [ "delivery notes" ],
        "description" : "finalize the single delivery note",
        "operationId" : "finalizeDeliveryNote",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deliveryNoteId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}" : {
      "get" : {
        "tags" : [ "delivery notes" ],
        "description" : "returns a single delivery note",
        "operationId" : "getDeliveryNote",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deliveryNoteId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNote"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/items/{deliveryNoteItemId}" : {
      "get" : {
        "tags" : [ "delivery notes" ],
        "description" : "returns a single delivery note item",
        "operationId" : "getDeliveryNoteItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deliveryNoteId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deliveryNoteItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryNoteItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deviceConfigurationVariables" : {
      "get" : {
        "tags" : [ "device configuration variables" ],
        "description" : "lists all device configuration variables",
        "operationId" : "getDeviceConfigurationVariables",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDeviceConfigurationVariable"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "device configuration variables" ],
        "description" : "adds a batch of new device configuration variables",
        "operationId" : "addDeviceConfigurationVariables",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new device configuration variables",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DeviceConfigurationVariable"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "device configuration variables" ],
        "description" : "deletes a batch of device configuration variables",
        "operationId" : "deleteDeviceConfigurationVariables",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing device configuration variables (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DeviceConfigurationVariable"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "device configuration variables" ],
        "description" : "updates a batch of device configuration variables",
        "operationId" : "updateDeviceConfigurationVariables",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing device configuration variables (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DeviceConfigurationVariable"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/deviceConfigurationVariables/{deviceConfigurationVariableId}" : {
      "get" : {
        "tags" : [ "device configuration variables" ],
        "description" : "returns the single device configuration variable",
        "operationId" : "getDeviceConfigurationVariable",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceConfigurationVariableId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeviceConfigurationVariable"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "device configuration variables" ],
        "description" : "deletes the single device configuration variable",
        "operationId" : "deleteDeviceConfigurationVariable",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceConfigurationVariableId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountConfigurations/{discountConfigurationId}/discountLevels" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "lists all discount configuration discount levels",
        "operationId" : "getDiscountConfigurationDiscountLevels",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDiscountLevel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "discount configurations" ],
        "description" : "adds a batch of new discount configuration discount levels",
        "operationId" : "addDiscountConfigurationDiscountLevels",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new discount levels",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscountLevel"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "discount configurations" ],
        "description" : "deletes a batch of discount configuration discount levels",
        "operationId" : "deleteDiscountConfigurationDiscountLevels",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing discount levels (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscountLevel"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "discount configurations" ],
        "description" : "updates a batch of discount configuration discount levels",
        "operationId" : "updateDiscountConfigurationDiscountLevels",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of discount levels",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscountLevel"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountConfigurations" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "lists all discount configurations",
        "operationId" : "getDiscountConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDiscountConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "discount configurations" ],
        "description" : "adds a batch of new discount configurations",
        "operationId" : "addDiscountConfigurationDiscounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new discount configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscountConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "discount configurations" ],
        "description" : "updates a batch of discountConfigurations; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateDiscountConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing discountConfigurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscountConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountConfigurations/{discountConfigurationId}/discountLevels/{discountLevelId}" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "returns the single discount configuration discount level",
        "operationId" : "getDiscountConfigurationDiscountLevel",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountLevelId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountLevel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "discount configurations" ],
        "description" : "deletes the single discount configuration discount level",
        "operationId" : "deleteDiscountConfigurationDiscountLevel",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountLevelId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "discount configurations" ],
        "description" : "updates the single discount configuration discount level; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateDiscountConfigurationDiscountLevel",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountLevelId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the discount level",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountLevel"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountConfigurations/{discountConfigurationId}" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "returns the single discount configuration",
        "operationId" : "getDiscountConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "discount configurations" ],
        "description" : "updates the single discount configuration; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateDiscountConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the discount configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscountConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountLevels/{discountLevelId}" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "returns the single discount level",
        "operationId" : "getDiscountLevel",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "discountLevelId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscountLevel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/discountLevels" : {
      "get" : {
        "tags" : [ "discount configurations" ],
        "description" : "lists all discount levels",
        "operationId" : "getDiscountLevels",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDiscountLevel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dispatchNotifications/{dispatchNotificationId}/items" : {
      "get" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "lists all dispatch notification items",
        "operationId" : "getDispatchNotificationItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "showImportData",
          "in" : "query",
          "description" : "when set to true, import data will included in response",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDispatchNotificationItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "adds dispatch notification items",
        "operationId" : "addDispatchNotificationItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "assignExistingProduct",
          "in" : "query",
          "description" : "try to assign an existing product using codes set in import item data",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new dispatch notification items",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DispatchNotificationItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "updates dispatch notification items",
        "operationId" : "updateDispatchNotificationItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assignExistingProduct",
          "in" : "query",
          "description" : "try to assign an existing product using codes set in import item data",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DispatchNotificationItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dispatchNotifications" : {
      "get" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "lists all dispatch notifications",
        "operationId" : "getDispatchNotifications",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceOrganizationalUnit",
          "in" : "query",
          "description" : "source organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDispatchNotification"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "adds dispatch notifications",
        "operationId" : "addDispatchNotifications",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new dispatch notifications",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DispatchNotification"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dispatchNotifications/{dispatchNotificationId}/book" : {
      "patch" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "books the single dispatch notification",
        "operationId" : "bookDispatchNotification",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dispatchNotifications/{dispatchNotificationId}" : {
      "get" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "returns the single dispatch notification",
        "operationId" : "getDispatchNotification",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DispatchNotification"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "deletes the single dispatch notification",
        "operationId" : "deleteDispatchNotification",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "updates the single dispatch notification",
        "operationId" : "updateDispatchNotification",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DispatchNotification"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/dispatchNotifications/{dispatchNotificationId}/items/{dispatchNotificationItemId}" : {
      "get" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "returns the single dispatch notification item",
        "operationId" : "getDispatchNotificationItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "showImportData",
          "in" : "query",
          "description" : "when set to true, import data will included in response",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DispatchNotificationItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "deletes the single dispatch notification item",
        "operationId" : "deleteDispatchNotificationItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "dispatch notifications" ],
        "description" : "updates the single dispatch notification item",
        "operationId" : "updateDispatchNotificationItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dispatchNotificationItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assignExistingProduct",
          "in" : "query",
          "description" : "try to assign an existing product using codes set in import item data",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DispatchNotificationItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/economicZones" : {
      "get" : {
        "tags" : [ "economic zones" ],
        "description" : "lists all economic zones",
        "operationId" : "getEconomicZones",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListEconomicZone"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "economic zones" ],
        "description" : "adds a batch of new economic zones",
        "operationId" : "addEconomicZones",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new economic zones",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EconomicZone"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "economic zones" ],
        "description" : "deletes a batch of economic zones",
        "operationId" : "deleteEconomicZones",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing economic zones (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EconomicZone"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "economic zones" ],
        "description" : "updates a batch of economic zones",
        "operationId" : "updateEconomicZones",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing economic zones (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EconomicZone"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/economicZones/{economicZoneId}" : {
      "get" : {
        "tags" : [ "economic zones" ],
        "description" : "returns the single economic zone",
        "operationId" : "getEconomicZone",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "economicZoneId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EconomicZone"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/entryGates" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "lists all entry gates",
        "operationId" : "getEntryGates",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListEntryGate"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "adds a batch of new entry gates",
        "operationId" : "addEntryGates",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new entry gates",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EntryGate"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "deletes a batch of entry gates",
        "operationId" : "deleteEntryGates",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing entry gates (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EntryGate"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "ticketing" ],
        "description" : "updates a batch of entry gates",
        "operationId" : "updateEntryGates",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing entry gates (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EntryGate"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/entryGates/{entryGateId}" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "returns the single entry gate",
        "operationId" : "getEntryGate",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entryGateId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntryGate"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/events" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "lists all events",
        "operationId" : "getEvents",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minStartTime",
          "in" : "query",
          "description" : "min (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxStartTime",
          "in" : "query",
          "description" : "max (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListEvent"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        }
      },
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "adds a batch of new events",
        "operationId" : "addEvents",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "deprecated" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new events",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "ticketing" ],
        "description" : "updates a batch of events; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateEvents",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing events",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{koronaAccountId}/events/{eventId}" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "returns the single event",
        "operationId" : "getEvent",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "deletes the single event",
        "operationId" : "deleteEvent",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        }
      },
      "patch" : {
        "tags" : [ "ticketing" ],
        "description" : "updates the single event",
        "operationId" : "updateEvent",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the event",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Event"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        }
      }
    },
    "/accounts/{koronaAccountId}/externalSystemCalls" : {
      "get" : {
        "tags" : [ "external system calls" ],
        "description" : "lists all external system calls",
        "operationId" : "getExternalSystemCalls",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListExternalSystemCall"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "external system calls" ],
        "description" : "adds a batch of new external system calls",
        "operationId" : "addExternalSystemCalls",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new external system calls",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ExternalSystemCall"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "external system calls" ],
        "description" : "deletes a batch of external system calls",
        "operationId" : "deleteExternalSystemCalls",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing external system calls (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ExternalSystemCall"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "external system calls" ],
        "description" : "updates a batch of external system calls",
        "operationId" : "updateExternalSystemCalls",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing external system calls (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ExternalSystemCall"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/externalSystemCalls/{externalSystemCallId}" : {
      "get" : {
        "tags" : [ "external system calls" ],
        "description" : "returns a single external system call",
        "operationId" : "getExternalSystemCall",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalSystemCallId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalSystemCall"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "external system calls" ],
        "description" : "deletes a single external system call",
        "operationId" : "deleteExternalSystemCall",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalSystemCallId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "external system calls" ],
        "description" : "updates the single external system call",
        "operationId" : "updateExternalSystemCall",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "externalSystemCallId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the external system call",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalSystemCall"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/fiscalUnits" : {
      "get" : {
        "tags" : [ "fiscal units" ],
        "description" : "lists all fiscal units",
        "operationId" : "getFiscalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "type of fiscal unit",
          "schema" : {
            "type" : "string",
            "enum" : [ "EFSTA", "FISKALY", "SWISSBIT", "SWISSBIT_LAN" ]
          }
        }, {
          "name" : "apiKey",
          "in" : "query",
          "description" : "api key of fiscal unit",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListFiscalUnit"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "fiscal units" ],
        "description" : "adds a batch of fiscal units",
        "operationId" : "addFiscalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new fiscal units",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/FiscalUnit"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "fiscal units" ],
        "description" : "updates a batch of fiscal units",
        "operationId" : "updateFiscalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing fiscal units (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/FiscalUnit"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/fiscalUnits/{fiscalUnitId}" : {
      "get" : {
        "tags" : [ "fiscal units" ],
        "description" : "returns the single fiscal unit",
        "operationId" : "getFiscalUnit",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fiscalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FiscalUnit"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "fiscal units" ],
        "description" : "updates the fiscal unit",
        "operationId" : "updateFiscalUnit",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fiscalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the fiscal unit",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FiscalUnit"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/images" : {
      "get" : {
        "tags" : [ "images" ],
        "description" : "returns a list of image properties",
        "operationId" : "getImages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exportImageData",
          "in" : "query",
          "description" : "export image data",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListImage"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "images" ],
        "description" : "adds new images",
        "operationId" : "addImages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "processing",
          "in" : "query",
          "description" : "whether PRINTER images should be processed with Dithering",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "list of properties of new images",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "images" ],
        "description" : "deletes a batch of images",
        "operationId" : "deleteImages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing images (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "images" ],
        "description" : "updates an array of existing images",
        "operationId" : "updateImages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "processing",
          "in" : "query",
          "description" : "whether PRINTER images should be processed with Dithering",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing images",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/images/{imageId}" : {
      "get" : {
        "tags" : [ "images" ],
        "description" : "displays the image or returns properties as JSON",
        "operationId" : "getImage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accept",
          "in" : "header",
          "description" : "the accepted content type for the response",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "image/jpg" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "images" ],
        "description" : "deletes the single image",
        "operationId" : "deleteImage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "images" ],
        "description" : "updates a single image",
        "operationId" : "updateImage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "processing",
          "in" : "query",
          "description" : "whether PRINTER images should be processed with Dithering",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update the image",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Image"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/infoTexts" : {
      "get" : {
        "tags" : [ "info texts" ],
        "description" : "lists all info texts",
        "operationId" : "getInfoTexts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListInfoText"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "info texts" ],
        "description" : "adds a batch of new info texts",
        "operationId" : "addInfoTexts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new info texts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InfoText"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "info texts" ],
        "description" : "deletes a batch of info texts",
        "operationId" : "deleteInfoTexts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing info texts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InfoText"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "info texts" ],
        "description" : "updates a batch of info texts",
        "operationId" : "updateInfoTexts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing info texts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InfoText"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/infoTexts/{infoTextId}" : {
      "get" : {
        "tags" : [ "info texts" ],
        "description" : "returns the single info text",
        "operationId" : "getInfoText",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "infoTextId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InfoText"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "lists all inventories",
        "operationId" : "getInventories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListInventory"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "inventories" ],
        "description" : "adds a batch of new inventories",
        "operationId" : "addInventories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of new inventories",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "lists all inventory list items",
        "operationId" : "getInventoryListItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListInventoryListItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "inventories" ],
        "description" : "adds inventory list items",
        "operationId" : "addInventoryListItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InventoryListItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "inventories" ],
        "description" : "updates inventory list items (property [product] required))",
        "operationId" : "updateInventoryListItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of inventory list items to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InventoryListItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/book" : {
      "patch" : {
        "tags" : [ "inventories" ],
        "description" : "book the single inventory list",
        "operationId" : "bookInventoryList",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "returns the single inventory",
        "operationId" : "getInventory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "inventories" ],
        "description" : "deletes the single inventory (only allowed if hasBookedReceipts=false)",
        "operationId" : "deleteInventory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "inventories" ],
        "description" : "updates the single inventory",
        "operationId" : "updateInventory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the inventory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Inventory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "returns the single inventory list item",
        "operationId" : "getInventoryListItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryListItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "inventories" ],
        "description" : "deletes the single inventory list item",
        "operationId" : "deleteInventoryListItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "inventories" ],
        "description" : "updates the single inventory list item",
        "operationId" : "updateInventoryListItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InventoryListItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "returns the single inventory list",
        "operationId" : "getInventoryList",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryList"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "inventories" ],
        "description" : "updates the single inventory list",
        "operationId" : "updateInventoryList",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryListId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InventoryList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists" : {
      "get" : {
        "tags" : [ "inventories" ],
        "description" : "lists all inventory lists",
        "operationId" : "getInventoryLists",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListInventoryList"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/itemSequences" : {
      "get" : {
        "tags" : [ "item sequences" ],
        "description" : "lists all item sequences",
        "operationId" : "getItemSequences",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListItemSequence"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "item sequences" ],
        "description" : "adds a batch of new item sequences",
        "operationId" : "addItemSequences",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new item sequences",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ItemSequence"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "item sequences" ],
        "description" : "deletes a batch of item sequences",
        "operationId" : "deleteItemSequences",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing item sequences (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ItemSequence"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "item sequences" ],
        "description" : "updates a batch of item sequences; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateItemSequences",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing item sequences",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ItemSequence"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/itemSequences/{itemSequenceId}" : {
      "get" : {
        "tags" : [ "item sequences" ],
        "description" : "returns a single item sequence",
        "operationId" : "getItemSequence",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSequenceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemSequence"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "item sequences" ],
        "description" : "deletes the single item sequence",
        "operationId" : "deleteItemSequence",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSequenceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "item sequences" ],
        "description" : "updates the single item sequence; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateItemSequence",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSequenceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the item sequence",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSequence"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/maxRevisions" : {
      "get" : {
        "tags" : [ "korona account" ],
        "description" : "returns the max revisions of relevant types",
        "operationId" : "getAccountMaxRevisions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountMaxRevisions"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}" : {
      "get" : {
        "tags" : [ "korona account" ],
        "description" : "returns the single korona account",
        "operationId" : "getKoronaAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KoronaAccount"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/languages" : {
      "get" : {
        "tags" : [ "languages" ],
        "description" : "lists all languages",
        "operationId" : "getLanguages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListLanguage"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "languages" ],
        "description" : "adds a batch of new languages",
        "operationId" : "addLanguages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new languages",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "languages" ],
        "description" : "deletes a batch of languages",
        "operationId" : "deleteLanguages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing languages (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "languages" ],
        "description" : "updates a batch of languages; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateLanguages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing languages",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/languages/{languageId}" : {
      "get" : {
        "tags" : [ "languages" ],
        "description" : "returns a single language",
        "operationId" : "getLanguage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "languageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "languages" ],
        "description" : "deletes the single language",
        "operationId" : "deleteLanguage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "languageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "languages" ],
        "description" : "updates the single language; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateLanguage",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "languageId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the language",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Language"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/loyaltyCards" : {
      "get" : {
        "tags" : [ "loyalty cards" ],
        "description" : "lists all loyalty cards",
        "operationId" : "getLoyaltyCards",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "customer id to filter by",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListLoyaltyCard"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "loyalty cards" ],
        "description" : "adds a batch of new loyalty cards",
        "operationId" : "addLoyaltyCards",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new loyalty cards",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/LoyaltyCard"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "loyalty cards" ],
        "description" : "deletes a batch of loyalty cards",
        "operationId" : "deleteLoyaltyCards",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing loyalty cards (id, number or customerId required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/LoyaltyCard"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "loyalty cards" ],
        "description" : "updates a batch of loyalty cards; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateLoyaltyCards",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing loyalty cards",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/LoyaltyCard"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/loyaltyCards/{loyaltyCardId}" : {
      "get" : {
        "tags" : [ "loyalty cards" ],
        "description" : "returns the single loyalty card",
        "operationId" : "getLoyaltyCard",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loyaltyCardId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoyaltyCard"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "loyalty cards" ],
        "description" : "deletes the single loyalty card",
        "operationId" : "deleteLoyaltyCard",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loyaltyCardId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "loyalty cards" ],
        "description" : "updates the single loyalty card; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateLoyaltyCard",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loyaltyCardId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the object to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoyaltyCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/messages" : {
      "post" : {
        "tags" : [ "messages" ],
        "description" : "sends a command type to points of sale",
        "operationId" : "addMessages",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of messages",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Message"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/numberRangeConfigurations" : {
      "get" : {
        "tags" : [ "number range configurations" ],
        "description" : "lists all number range configurations",
        "operationId" : "getNumberRangeConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListNumberRangeConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "number range configurations" ],
        "description" : "adds a batch of new number range configurations",
        "operationId" : "addNumberRangeConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new number range configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NumberRangeConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "number range configurations" ],
        "description" : "updates a batch of number range configurations",
        "operationId" : "updateNumberRangeConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing number range configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NumberRangeConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/numberRangeConfigurations/{numberRangeConfigurationId}" : {
      "get" : {
        "tags" : [ "number range configurations" ],
        "description" : "returns the number range configuration",
        "operationId" : "getNumberRangeConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "numberRangeConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NumberRangeConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/orderPortalSuppliers" : {
      "get" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "lists all order portal suppliers",
        "operationId" : "getOrderPortalSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListOrderPortalSupplier"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "adds a batch of new order_portal_suppliers",
        "operationId" : "addOrderPortalSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new order portal suppliers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrderPortalSupplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "deletes a batch of order portal suppliers",
        "operationId" : "deleteOrderPortalSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing order portal suppliers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrderPortalSupplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "updates a batch of order portal suppliers; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateOrderPortalSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing order portal suppliers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrderPortalSupplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/orderPortalSuppliers/{orderPortalSupplierId}" : {
      "get" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "returns the single order portal supplier",
        "operationId" : "getOrderPortalSupplier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderPortalSupplierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderPortalSupplier"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "deletes the single order portal supplier",
        "operationId" : "deleteOrderPortalSupplier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderPortalSupplierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "order portal suppliers" ],
        "description" : "updates the single order portal supplier; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateOrderPortalSupplier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderPortalSupplierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the order portal supplier",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderPortalSupplier"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}/dayRatings" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "lists all organizational unit related day ratings",
        "operationId" : "getOrganizationalUnitDayRatings",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListDayRating"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "organizational units" ],
        "description" : "adds a batch of new day ratings",
        "operationId" : "addOrganizationalUnitDayRatings",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of new day ratings",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DayRating"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "organizational units" ],
        "description" : "updates a batch of day ratings",
        "operationId" : "updateOrganizationalUnitDayRatings",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of new day ratings",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DayRating"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "lists all organizational units",
        "operationId" : "getOrganizationalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListOrganizationalUnit"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "organizational units" ],
        "description" : "adds a batch of new organizational units",
        "operationId" : "addOrganizationalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new organizational units",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrganizationalUnit"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "organizational units" ],
        "description" : "deletes a batch of organizational units",
        "operationId" : "deleteOrganizationalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing organizational units (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrganizationalUnit"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "organizational units" ],
        "description" : "updates a batch of organizational units; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateOrganizationalUnits",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing organizational units",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OrganizationalUnit"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "returns the single organizational unit",
        "operationId" : "getOrganizationalUnit",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationalUnit"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "organizational units" ],
        "description" : "deletes the single organizational unit by its id",
        "operationId" : "deleteOrganizationalUnit",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "organizational units" ],
        "description" : "updates the organizational unit ",
        "operationId" : "updateOrganizationalUnit",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the organizational unit",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrganizationalUnit"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}/dayRatings/{dayRatingIdOrDate}" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "returns the single day rating by its id or date",
        "operationId" : "getOrganizationalUnitDayRating",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dayRatingIdOrDate",
          "in" : "path",
          "description" : "the id or date (YYYY-MM-DD) of the day rating",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DayRating"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "organizational units" ],
        "description" : "deletes the single day rating by its id or date",
        "operationId" : "deleteOrganizationalUnitDayRating",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dayRatingIdOrDate",
          "in" : "path",
          "description" : "the id or date (YYYY-MM-DD) of the day rating",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "organizational units" ],
        "description" : "updates the day rating by its id or date",
        "operationId" : "updateOrganizationalUnitDayRating",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dayRatingIdOrDate",
          "in" : "path",
          "description" : "the id or date (YYYY-MM-DD) of the day rating",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the day rating",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DayRating"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}/inventoryLists" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "lists the inventory lists belonging to the organizational unit (KORONA.retail required)",
        "operationId" : "getOrganizationalUnitInventoryLists",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListInventoryList"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}/productStocks" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "lists the product stocks of the organizational unit, in case it contains a warehouse (KORONA.retail required)",
        "operationId" : "getOrganizationalUnitProductStocks",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListProductStock"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/organizationalUnits/{organizationalUnitId}/stockReceipts" : {
      "get" : {
        "tags" : [ "organizational units" ],
        "description" : "lists the stock receipts belonging to the organizational unit (KORONA.retail required)",
        "operationId" : "getOrganizationalUnitStockReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnitId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sourceOrganizationalUnit",
          "in" : "query",
          "description" : "source organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockReceipt"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/paymentMethodCategories" : {
      "get" : {
        "tags" : [ "payment method categories" ],
        "description" : "lists all payment method categories",
        "operationId" : "getPaymentMethodCategories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPaymentMethodCategory"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "payment method categories" ],
        "description" : "adds a batch of new payment method categories",
        "operationId" : "addPaymentMethodCategories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new payment method categories",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethodCategory"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment method categories" ],
        "description" : "deletes a batch of payment method categories",
        "operationId" : "deletePaymentMethodCategories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing payment method categories (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethodCategory"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "payment method categories" ],
        "description" : "updates a batch of payment method categories; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePaymentMethodCategories",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing payment method categories",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethodCategory"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/paymentMethodCategories/{paymentMethodCategoryId}" : {
      "get" : {
        "tags" : [ "payment method categories" ],
        "description" : "returns the single payment method category",
        "operationId" : "getPaymentMethodCategory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodCategoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodCategory"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment method categories" ],
        "description" : "deletes the single payment method category",
        "operationId" : "deletePaymentMethodCategory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodCategoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "payment method categories" ],
        "description" : "updates the single payment method category; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updatePaymentMethodCategory",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodCategoryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the payment method",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodCategory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/paymentMethods" : {
      "get" : {
        "tags" : [ "payment methods" ],
        "description" : "lists all payment methods",
        "operationId" : "getPaymentMethods",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPaymentMethod"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "payment methods" ],
        "description" : "adds a batch of new payment methods",
        "operationId" : "addPaymentMethods",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new payment methods",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment methods" ],
        "description" : "deletes a batch of payment methods",
        "operationId" : "deletePaymentMethods",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing payment methods (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "payment methods" ],
        "description" : "updates a batch of payment methods; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePaymentMethods",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing payment methods",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}" : {
      "get" : {
        "tags" : [ "payment methods" ],
        "description" : "returns the single payment method",
        "operationId" : "getPaymentMethod",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethod"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment methods" ],
        "description" : "deletes the single payment method",
        "operationId" : "deletePaymentMethod",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "payment methods" ],
        "description" : "updates the single payment method; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updatePaymentMethod",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentMethodId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the payment method",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethod"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posButtonLayouts" : {
      "get" : {
        "tags" : [ "pos button layouts" ],
        "description" : "lists all pos button layouts",
        "operationId" : "getPosButtonLayouts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPosButtonLayout"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "pos button layouts" ],
        "description" : "adds a batch of new pos button layouts",
        "operationId" : "addPosButtonLayouts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new pos button layouts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosButtonLayout"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos button layouts" ],
        "description" : "deletes a batch of pos button layouts",
        "operationId" : "deletePosButtonLayouts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing pos button layouts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosButtonLayout"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos button layouts" ],
        "description" : "updates a batch of pos button layouts; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePosButtonLayouts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing pos button layouts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosButtonLayout"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posButtonLayouts/{posButtonLayoutId}" : {
      "get" : {
        "tags" : [ "pos button layouts" ],
        "description" : "returns the single pos button layout",
        "operationId" : "getPosButtonLayout",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posButtonLayoutId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PosButtonLayout"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos button layouts" ],
        "description" : "deletes the single pos botton layout",
        "operationId" : "deletePosButtonLayout",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posButtonLayoutId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos button layouts" ],
        "description" : "updates the single pos button layout; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updatePosButtonLayout",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posButtonLayoutId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the pos button layout",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PosButtonLayout"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posPageLayoutConfigurations" : {
      "get" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "lists all pos page layout configurations",
        "operationId" : "getPosPageLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPosPageLayoutConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "adds a batch of new pos page layout configurations",
        "operationId" : "addPosPageLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new pos page layout configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "deletes a batch of pos page layout configurations",
        "operationId" : "deletePosPageLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing pos page layout configurations (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "updates a batch of pos page layout configurations; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePosPageLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing pos page layout configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posPageLayoutConfigurations/{posPageLayoutConfigurationId}" : {
      "get" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "returns the single pos page layout configuration",
        "operationId" : "getPosPageLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posPageLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "deletes the single pos page layout configuration",
        "operationId" : "deletePosPageLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posPageLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos page layout configurations" ],
        "description" : "updates the single pos page layout configuration; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updatePosPageLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posPageLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the pos page layout configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posProfiles" : {
      "get" : {
        "tags" : [ "pos profiles" ],
        "description" : "lists all pos profiles",
        "operationId" : "getPosProfiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPosProfile"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "pos profiles" ],
        "description" : "adds a batch of new pos profiles",
        "operationId" : "addPosProfiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new pos profiles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosProfile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos profiles" ],
        "description" : "deletes a batch of pos profiles",
        "operationId" : "deletePosProfiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing pos profiles (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosProfile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos profiles" ],
        "description" : "updates a batch of pos profiles; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePosProfiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing pos profiles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PosProfile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/posProfiles/{posProfileId}" : {
      "get" : {
        "tags" : [ "pos profiles" ],
        "description" : "returns the single pos profile",
        "operationId" : "getPosProfile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posProfileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PosProfile"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "pos profiles" ],
        "description" : "deletes the single pos profile",
        "operationId" : "deletePosProfile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posProfileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "pos profiles" ],
        "description" : "updates the single pos profile; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updatePosProfile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "posProfileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the pos profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PosProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/endOfDayStatements" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "lists all point of sale-related end-of-day-statements",
        "operationId" : "getPointOfSaleEndOfDayStatements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minFinishTime",
          "in" : "query",
          "description" : "min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxFinishTime",
          "in" : "query",
          "description" : "max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "zCount",
          "in" : "query",
          "description" : "zCount",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListEndOfDayStatement"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "points of sale" ],
        "description" : "adds a batch of point of sale-related end-of-day-statements",
        "operationId" : "addPointOfSaleEndOfDayStatements",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the end-of-day-statements to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/EndOfDayStatement"
                }
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "lists all point of sale-related receipts",
        "operationId" : "getPointOfSaleReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "zCount",
          "in" : "query",
          "description" : "z-count of the receipt",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "voidedItems",
          "in" : "query",
          "description" : "when set to true, voided items will included in response",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "orderNumber",
          "in" : "query",
          "description" : "order number",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListReceipt"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "points of sale" ],
        "description" : "adds a batch of point of sale-related receipts",
        "operationId" : "addPointOfSaleReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "disableReceiptNumberPrefix",
          "in" : "query",
          "description" : "prevents setting a prefix at the receipt number",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "the receipts to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Receipt"
                }
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "lists all points of sale",
        "operationId" : "getPointsOfSale",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "external",
          "in" : "query",
          "description" : "indicates external/internal devices should be loaded (default: null (load all))",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "coupled",
          "in" : "query",
          "description" : "indicates coupled/not coupled devices should be loaded (default: null (load all))",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPos"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "points of sale" ],
        "description" : "adds a batch of new points of sale",
        "operationId" : "addPointsOfSale",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new points of sale",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Pos"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "points of sale" ],
        "description" : "updates a batch of points of sale; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updatePointsOfSale",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing points of sale",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Pos"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "returns the single point of sale",
        "operationId" : "getPointOfSale",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "the number of the point of sale",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pos"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "points of sale" ],
        "description" : "updates the point of sale",
        "operationId" : "updatePointOfSale",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device (required if already coupled)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "decouple",
          "in" : "query",
          "description" : "executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the point of sale ('couplingId' only)",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pos"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/balances" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "lists all point of sale-related pos balances",
        "operationId" : "getPointOfSaleBalances",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "point of sale",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "zCount",
          "in" : "query",
          "description" : "z-count of the pos balance",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "cashier",
          "in" : "query",
          "description" : "cashier id to filter by",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPosBalance"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/maxNumbers" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "returns the single point of sale",
        "operationId" : "getPointOfSaleMaxNumbers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "point of sale",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PosMaxNumbers"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}" : {
      "get" : {
        "tags" : [ "points of sale" ],
        "description" : "returns the single point of sale-related receipt",
        "operationId" : "getPointOfSaleReceipt",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pointOfSaleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptId",
          "in" : "path",
          "description" : "the id of the receipt",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "couplingId",
          "in" : "query",
          "description" : "the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voidedItems",
          "in" : "query",
          "description" : "when set to true, voided items will included in response",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Receipt"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/priceGroups" : {
      "get" : {
        "tags" : [ "price groups" ],
        "description" : "lists all price groups",
        "operationId" : "getPriceGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPriceGroup"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "price groups" ],
        "description" : "adds a batch of new price groups",
        "operationId" : "addPriceGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new price groups",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "price groups" ],
        "description" : "deletes a batch of price groups",
        "operationId" : "deletePriceGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing price groups (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "price groups" ],
        "description" : "updates a batch of price groups",
        "operationId" : "updatePriceGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing price groups (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceGroup"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/priceGroups/{priceGroupId}" : {
      "get" : {
        "tags" : [ "price groups" ],
        "description" : "returns the single price group",
        "operationId" : "getPriceGroup",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "priceGroupId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriceGroup"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/priceRules" : {
      "get" : {
        "tags" : [ "price rules" ],
        "description" : "lists all price rules",
        "operationId" : "getPriceRules",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPriceRule"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "price rules" ],
        "description" : "adds a batch of new price rules",
        "operationId" : "addPriceRules",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new price rules",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceRule"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "price rules" ],
        "description" : "deletes a batch of price rules",
        "operationId" : "deletePriceRules",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing price rules (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceRule"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "price rules" ],
        "description" : "updates a batch of price rules",
        "operationId" : "updatePriceRules",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing price rules (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PriceRule"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/priceRules/{priceRuleId}" : {
      "get" : {
        "tags" : [ "price rules" ],
        "description" : "returns the single price rule",
        "operationId" : "getPriceRule",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "priceRuleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriceRule"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "price rules" ],
        "description" : "deletes the single price rule",
        "operationId" : "deletePriceRule",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "priceRuleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "price rules" ],
        "description" : "updates the single price rule",
        "operationId" : "updatePriceRule",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "priceRuleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the price rule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriceRule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/prices" : {
      "get" : {
        "tags" : [ "prices" ],
        "description" : "lists all product prices",
        "operationId" : "getPrices",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minValidFrom",
          "in" : "query",
          "description" : "min (inclusive) timestamp for validFrom (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "priceGroup",
          "in" : "query",
          "description" : "price group",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPrice"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "prices" ],
        "description" : "adds a batch of new product prices",
        "operationId" : "addPrices",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new product prices",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Price"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "prices" ],
        "description" : "deletes a batch of product prices",
        "operationId" : "deletePrices",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing product prices (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Price"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "prices" ],
        "description" : "updates a batch of product prices",
        "operationId" : "updatePrices",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing product prices (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Price"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/prices/{priceId}" : {
      "get" : {
        "tags" : [ "prices" ],
        "description" : "returns the single product price",
        "operationId" : "getPrice",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "priceId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Price"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/products" : {
      "get" : {
        "tags" : [ "products" ],
        "description" : "lists all products",
        "operationId" : "getProducts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "productCodes",
          "in" : "query",
          "description" : "at least one product code to filter by (multiple separated by comma; max. 10)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "commodityGroup",
          "in" : "query",
          "description" : "commodity group id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assortment",
          "in" : "query",
          "description" : "assortment id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "tag id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "name of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "omitPageCounts",
          "in" : "query",
          "description" : "Set 'pagesTotal' and 'resultsTotal' to -1, allowing us to omit the count operation and speeding up the query.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListProduct"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "products" ],
        "description" : "adds a batch of new products",
        "operationId" : "addProducts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "mergeListItems",
          "in" : "query",
          "description" : "if set to true, merges lists instead of replacing them",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "mergeTags",
          "in" : "query",
          "description" : "if set to true, merges tags instead of overwriting the list",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new products",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "products" ],
        "description" : "deletes a batch of products",
        "operationId" : "deleteProducts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing products (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "products" ],
        "description" : "updates a batch of products; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateProducts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mergeListItems",
          "in" : "query",
          "description" : "if set to true, merges lists instead of replacing them",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "mergeTags",
          "in" : "query",
          "description" : "if set to true, merges tags instead of overwriting the list",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing products",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/products/{productId}" : {
      "get" : {
        "tags" : [ "products" ],
        "description" : "returns the single product",
        "operationId" : "getProduct",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "products" ],
        "description" : "deletes the single product",
        "operationId" : "deleteProduct",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "products" ],
        "description" : "updates the single product; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mergeListItems",
          "in" : "query",
          "description" : "if set to true, merges lists instead of replacing them",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "mergeTags",
          "in" : "query",
          "description" : "if set to true, merges tags instead of overwriting the list",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the product",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Product"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/products/{productId}/stocks" : {
      "get" : {
        "tags" : [ "products" ],
        "description" : "lists the product stocks in different warehouses (KORONA.retail required)",
        "operationId" : "getProductStocks",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListProductStock"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/products/{productId}/tags/{tagId}" : {
      "delete" : {
        "tags" : [ "products" ],
        "description" : "removes the tag from the product",
        "operationId" : "removeTagFromProduct",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/productionTypes" : {
      "get" : {
        "tags" : [ "production types" ],
        "description" : "lists all production types",
        "operationId" : "getProductionTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListProductionType"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "production types" ],
        "description" : "adds a batch of new production types",
        "operationId" : "addProductionTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new production types",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProductionType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "production types" ],
        "description" : "deletes a batch of production types",
        "operationId" : "deleteProductionTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing production types (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProductionType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "production types" ],
        "description" : "updates a batch of production types",
        "operationId" : "updateProductionTypes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing production types (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProductionType"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/productionTypes/{productionTypeId}" : {
      "get" : {
        "tags" : [ "production types" ],
        "description" : "returns the single production type",
        "operationId" : "getProductionType",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionTypeId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductionType"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/promotions" : {
      "get" : {
        "tags" : [ "promotions" ],
        "description" : "lists all promotions",
        "operationId" : "getPromotions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListPromotion"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "promotions" ],
        "description" : "adds a batch of new promotions",
        "operationId" : "addPromotions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new promotions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Promotion"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "promotions" ],
        "description" : "deletes a batch of promotions",
        "operationId" : "deletePromotions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing promotions (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Promotion"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "promotions" ],
        "description" : "updates a batch of promotions",
        "operationId" : "updatePromotions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing promotions (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Promotion"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/promotions/{promotionId}" : {
      "get" : {
        "tags" : [ "promotions" ],
        "description" : "returns the single promotion",
        "operationId" : "getPromotion",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "promotionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Promotion"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "promotions" ],
        "description" : "deletes the single promotion",
        "operationId" : "deletePromotion",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "promotionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "promotions" ],
        "description" : "updates the single promotion",
        "operationId" : "updatePromotion",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "promotionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the promotion",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Promotion"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/receiptLayoutConfigurations" : {
      "get" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "lists all receipt layout configurations",
        "operationId" : "getReceiptLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListReceiptLayoutConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "adds a batch of new receipt layout configurations",
        "operationId" : "addReceiptLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new receipt layout configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "deletes a batch of receipt layout configurations",
        "operationId" : "deleteReceiptLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing receipt layout configurations (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "updates a batch of receipt layout configurations; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateReceiptLayoutConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing receipt layout configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/receiptLayoutConfigurations/{receiptLayoutConfigurationId}" : {
      "get" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "returns the single receipt layout configuration",
        "operationId" : "getReceiptLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "deletes the single receipt layout configuration",
        "operationId" : "deleteReceiptLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "receipt layout configurations" ],
        "description" : "updates the single receipt layout configuration; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateReceiptLayoutConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptLayoutConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the receipt layout configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/receipts/{receiptId}" : {
      "get" : {
        "tags" : [ "receipts" ],
        "description" : "returns the single receipt",
        "operationId" : "getReceipt",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voidedItems",
          "in" : "query",
          "description" : "when set to true, voided items will included in response",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Receipt"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/receipts/{receiptId}/items/{receiptItemId}" : {
      "get" : {
        "tags" : [ "receipts" ],
        "description" : "returns the single receipt item",
        "operationId" : "getReceiptItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReceiptItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/receipts" : {
      "get" : {
        "tags" : [ "receipts" ],
        "description" : "lists all receipts",
        "operationId" : "getReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "pointOfSale",
          "in" : "query",
          "description" : "point of sale",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "zCount",
          "in" : "query",
          "description" : "z-count of the receipt",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "voidedItems",
          "in" : "query",
          "description" : "when set to true, voided items will included in response",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "orderNumber",
          "in" : "query",
          "description" : "order number",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "omitPageCounts",
          "in" : "query",
          "description" : "Set 'pagesTotal' and 'resultsTotal' to -1, allowing us to omit the count operation and speeding up the query.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListReceipt"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/rentals" : {
      "get" : {
        "tags" : [ "rentals" ],
        "description" : "lists all rentals",
        "operationId" : "getRentals",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "pointOfSale",
          "in" : "query",
          "description" : "point of sale",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "customer id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListRental"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "rentals" ],
        "description" : "adds rentals",
        "operationId" : "addRentals",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Rental"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "rentals" ],
        "description" : "updates a batch of rentals; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateRentals",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing rentals",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Rental"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/rentals/{rentalId}/book" : {
      "patch" : {
        "tags" : [ "rentals" ],
        "description" : "book the single rental",
        "operationId" : "bookRental",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rentalId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/rentals/{rentalId}" : {
      "get" : {
        "tags" : [ "rentals" ],
        "description" : "returns a single rental",
        "operationId" : "getRental",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rentalId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Rental"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "rentals" ],
        "description" : "updates the single rental",
        "operationId" : "updateRental",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rentalId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the rental",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Rental"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/rentals/{rentalId}/items/{rentalItemId}" : {
      "get" : {
        "tags" : [ "rentals" ],
        "description" : "returns a single rental item",
        "operationId" : "getRentalItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rentalId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rentalItemId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RentalItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/reportFiles" : {
      "get" : {
        "tags" : [ "report files" ],
        "description" : "lists all report files",
        "operationId" : "getReportFiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListReportFile"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "report files" ],
        "description" : "adds a batch of new report files",
        "operationId" : "addReportFiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new report files",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReportFile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "report files" ],
        "description" : "deletes a batch of report files",
        "operationId" : "deleteReportFiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing Report Files (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReportFile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "report files" ],
        "description" : "updates a batch of report files",
        "operationId" : "updateReportFiles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing report files (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReportFile"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/reportFiles/{reportFileId}" : {
      "get" : {
        "tags" : [ "report files" ],
        "description" : "returns the single report file",
        "operationId" : "getReportFile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportFileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportFile"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "report files" ],
        "description" : "deletes the single report file",
        "operationId" : "deleteReportFile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportFileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "report files" ],
        "description" : "updates the single report file",
        "operationId" : "updateReportFile",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportFileId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the report file",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportFile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/revenueAccounts" : {
      "get" : {
        "tags" : [ "revenue accounts" ],
        "description" : "lists all revenue accounts",
        "operationId" : "getRevenueAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListRevenueAccount"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "revenue accounts" ],
        "description" : "adds a batch of new revenue accounts",
        "operationId" : "addRevenueAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new revenue accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/RevenueAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "revenue accounts" ],
        "description" : "deletes a batch of revenue accounts",
        "operationId" : "deleteRevenueAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing revenue accounts (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/RevenueAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "revenue accounts" ],
        "description" : "updates a batch of revenue accounts; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateRevenueAccounts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing revenue accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/RevenueAccount"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/revenueAccounts/{revenueAccountId}" : {
      "get" : {
        "tags" : [ "revenue accounts" ],
        "description" : "returns a single revenue account",
        "operationId" : "getRevenueAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revenueAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevenueAccount"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "revenue accounts" ],
        "description" : "deletes the single revenue account",
        "operationId" : "deleteRevenueAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revenueAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "revenue accounts" ],
        "description" : "updates the single revenue account; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateRevenueAccount",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revenueAccountId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the revenue account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevenueAccount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/salesTaxes" : {
      "get" : {
        "tags" : [ "sales taxes" ],
        "description" : "lists all sales taxes",
        "operationId" : "getSalesTaxes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListSalesTax"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sales taxes" ],
        "description" : "adds a batch of new sales taxes",
        "operationId" : "addSalesTaxes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new sectors",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SalesTax"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "sales taxes" ],
        "description" : "deletes a batch of sales taxes",
        "operationId" : "deleteSalesTaxes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing sales taxes (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SalesTax"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "sales taxes" ],
        "description" : "updates a batch of sales taxes",
        "operationId" : "updateSalesTaxes",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing sales taxes (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SalesTax"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/salesTaxes/{salesTaxId}" : {
      "get" : {
        "tags" : [ "sales taxes" ],
        "description" : "returns the single sales tax",
        "operationId" : "getSalesTax",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "salesTaxId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SalesTax"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/sectors" : {
      "get" : {
        "tags" : [ "sectors" ],
        "description" : "lists all sectors",
        "operationId" : "getSectors",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListSector"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sectors" ],
        "description" : "adds a batch of new sectors",
        "operationId" : "addSectors",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new sectors",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Sector"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "sectors" ],
        "description" : "deletes a batch of sectors",
        "operationId" : "deleteSectors",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing sectors (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Sector"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "sectors" ],
        "description" : "updates a batch of sectors",
        "operationId" : "updateSectors",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing sectors (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Sector"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/sectors/{sectorId}" : {
      "get" : {
        "tags" : [ "sectors" ],
        "description" : "returns the single sector",
        "operationId" : "getSector",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sectorId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Sector"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/specialPriceConfigurations" : {
      "get" : {
        "tags" : [ "special price configurations" ],
        "description" : "lists all special price configurations",
        "operationId" : "getSpecialPriceConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListSpecialPriceConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "special price configurations" ],
        "description" : "adds a batch of new special price configurations",
        "operationId" : "addSpecialPriceConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new special price configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SpecialPriceConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "special price configurations" ],
        "description" : "deletes a batch of special price configurations",
        "operationId" : "deleteSpecialPriceConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing special price configurations (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SpecialPriceConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "special price configurations" ],
        "description" : "updates a batch of special price configurations",
        "operationId" : "updateSpecialPriceConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing special price configurations (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SpecialPriceConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/specialPriceConfigurations/{specialPriceConfigurationId}" : {
      "get" : {
        "tags" : [ "special price configurations" ],
        "description" : "returns the single special price configuration",
        "operationId" : "getSpecialPriceConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "specialPriceConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SpecialPriceConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/specialPriceConfigurations/{specialPriceConfigurationId}/specialPrices" : {
      "get" : {
        "tags" : [ "special price configurations" ],
        "description" : "returns the special prices for the given configuration",
        "operationId" : "getSpecialPrices",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "specialPriceConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SpecialPrice"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/financialAccounting" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns the financial accounting data by revision or date; if both is set, date will be ignored",
        "operationId" : "getFinancialAccountingData",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "day",
          "in" : "query",
          "description" : "day",
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticListFinancialAccountingData"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/revenueData" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns information about the revenue in the given period",
        "operationId" : "getRevenue",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "number of the organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "time period for comparison",
          "schema" : {
            "type" : "string",
            "enum" : [ "DAY", "WEEK", "MONTH", "YEAR" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticRevenueData"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns the turnover per customer group during the given period",
        "operationId" : "getRevenueForCustomerGroups",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "number of the organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "time period for comparison",
          "schema" : {
            "type" : "string",
            "enum" : [ "DAY", "WEEK", "MONTH", "YEAR" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticMapStringRevenueData"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/revenueDataHourly" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns the turnover per hour during the given period",
        "operationId" : "getRevenueHourly",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "number of the organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "time period for comparison",
          "schema" : {
            "type" : "string",
            "enum" : [ "DAY", "WEEK", "MONTH", "YEAR" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticMapStringRevenueData"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/sectorRevenueByMonth" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns revenue grouped by sector, org, and month",
        "operationId" : "getSectorRevenueByMonth",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sector",
          "in" : "query",
          "description" : "id or number of the sector",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "id or number of the organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticListSectorData"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/statistics/topSeller" : {
      "get" : {
        "tags" : [ "statistics" ],
        "description" : "returns the top-seller",
        "operationId" : "getTopSeller",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "number of the organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "period",
          "in" : "query",
          "description" : "time period for comparison",
          "schema" : {
            "type" : "string",
            "enum" : [ "DAY", "WEEK", "MONTH", "YEAR" ]
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of products to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatisticListTopSeller"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockAdjustments/{stockAdjustmentId}/items" : {
      "get" : {
        "tags" : [ "stock adjustments" ],
        "description" : "lists all stock adjustment items",
        "operationId" : "getStockAdjustmentItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockAdjustmentItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock adjustments" ],
        "description" : "adds stock adjustment items",
        "operationId" : "addStockAdjustmentItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockAdjustmentItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock adjustments" ],
        "description" : "updates stock adjustment items",
        "operationId" : "updateStockAdjustmentItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockAdjustmentItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockAdjustments" : {
      "get" : {
        "tags" : [ "stock adjustments" ],
        "description" : "lists all stock adjustments",
        "operationId" : "getStockAdjustments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minFinishTime",
          "in" : "query",
          "description" : "min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxFinishTime",
          "in" : "query",
          "description" : "max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "warehouse",
          "in" : "query",
          "description" : "warehouse (= organizational unit having warehouse flag)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "receiptNumber",
          "in" : "query",
          "description" : "receipt number",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockAdjustment"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock adjustments" ],
        "description" : "adds stock adjustments",
        "operationId" : "addStockAdjustments",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockAdjustment"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockAdjustments/{stockAdjustmentId}/book" : {
      "patch" : {
        "tags" : [ "stock adjustments" ],
        "description" : "book the single stock adjustment",
        "operationId" : "bookStockAdjustment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockAdjustments/{stockAdjustmentId}/items/{productId}" : {
      "get" : {
        "tags" : [ "stock adjustments" ],
        "description" : "returns a single stock adjustment item",
        "operationId" : "getStockAdjustmentItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockAdjustmentItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "stock adjustments" ],
        "description" : "deletes the single stock adjustment item",
        "operationId" : "deleteStockAdjustmentItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock adjustments" ],
        "description" : "updates the single stock adjustment item",
        "operationId" : "updateStockAdjustmentItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockAdjustmentItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockAdjustments/{stockAdjustmentId}" : {
      "get" : {
        "tags" : [ "stock adjustments" ],
        "description" : "returns a single stock adjustment",
        "operationId" : "getStockAdjustment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockAdjustment"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock adjustments" ],
        "description" : "updates the single stock adjustment",
        "operationId" : "updateStockAdjustment",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockAdjustmentId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockAdjustment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders/{stockOrderId}/items" : {
      "get" : {
        "tags" : [ "stock orders" ],
        "description" : "lists all stock order items",
        "operationId" : "getStockOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockOrderItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock orders" ],
        "description" : "adds stock order items",
        "operationId" : "addStockOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockOrderItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock orders" ],
        "description" : "updates stock order items",
        "operationId" : "updateStockOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockOrderItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders" : {
      "get" : {
        "tags" : [ "stock orders" ],
        "description" : "lists all stock orders",
        "operationId" : "getStockOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceOrganizationalUnit",
          "in" : "query",
          "description" : "source organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "finalized",
          "in" : "query",
          "description" : "load only objects with this finalized status",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeItems",
          "in" : "query",
          "description" : "include items of receipt (default: true; setting to false improves performance)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockOrder"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock orders" ],
        "description" : "adds stock orders",
        "operationId" : "addStockOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockOrder"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders/{stockOrderId}/book" : {
      "patch" : {
        "tags" : [ "stock orders" ],
        "description" : "book the single stock order",
        "operationId" : "bookStockOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders/{stockOrderId}/items/{productId}" : {
      "get" : {
        "tags" : [ "stock orders" ],
        "description" : "returns the single stock order item",
        "operationId" : "getStockOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockOrderItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "stock orders" ],
        "description" : "deletes the single stock order item",
        "operationId" : "deleteStockOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock orders" ],
        "description" : "updates the single stock order item",
        "operationId" : "updateStockOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockOrderItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders/{stockOrderId}/finalize" : {
      "patch" : {
        "tags" : [ "stock orders" ],
        "description" : "finalize the single stock order",
        "operationId" : "finalizeStockOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockOrders/{stockOrderId}" : {
      "get" : {
        "tags" : [ "stock orders" ],
        "description" : "returns a single stock order",
        "operationId" : "getStockOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeItems",
          "in" : "query",
          "description" : "include items of receipt (default: true; setting to false improves performance)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockOrder"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock orders" ],
        "description" : "updates the single stock order",
        "operationId" : "updateStockOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockOrder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items" : {
      "get" : {
        "tags" : [ "stock receipts" ],
        "description" : "lists all stock-receipt items",
        "operationId" : "getStockReceiptItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockReceiptItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock receipts" ],
        "description" : "adds stock-receipt items",
        "operationId" : "addStockReceiptItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockReceiptItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock receipts" ],
        "description" : "updates stock-receipt items",
        "operationId" : "updateStockReceiptItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockReceiptItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockReceipts" : {
      "get" : {
        "tags" : [ "stock receipts" ],
        "description" : "lists all stock-receipts",
        "operationId" : "getStockReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minBookingTime",
          "in" : "query",
          "description" : "min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxBookingTime",
          "in" : "query",
          "description" : "max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceOrganizationalUnit",
          "in" : "query",
          "description" : "source organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bookingStatus",
          "in" : "query",
          "description" : "booking status (possible values: BOOKED, IN_PROGRESS)",
          "schema" : {
            "type" : "string",
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStockReceipt"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "stock receipts" ],
        "description" : "adds stock-receipts",
        "operationId" : "addStockReceipts",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StockReceipt"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book" : {
      "patch" : {
        "tags" : [ "stock receipts" ],
        "description" : "book the single stock-receipt",
        "operationId" : "bookStockReceipt",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}" : {
      "get" : {
        "tags" : [ "stock receipts" ],
        "description" : "returns the single stock-receipt item",
        "operationId" : "getStockReceiptItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockReceiptItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "stock receipts" ],
        "description" : "deletes the single stock-receipt item",
        "operationId" : "deleteStockReceiptItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock receipts" ],
        "description" : "updates the single stock-receipt item",
        "operationId" : "updateStockReceiptItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockReceiptItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}" : {
      "get" : {
        "tags" : [ "stock receipts" ],
        "description" : "returns the single stock-receipt",
        "operationId" : "getStockReceipt",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StockReceipt"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "stock receipts" ],
        "description" : "updates the single stock-receipt",
        "operationId" : "updateStockReceipt",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockReceiptId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StockReceipt"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items" : {
      "get" : {
        "tags" : [ "store orders" ],
        "description" : "lists all store order items",
        "operationId" : "getStoreOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStoreOrderItem"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "store orders" ],
        "description" : "adds store order items",
        "operationId" : "addStoreOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StoreOrderItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "store orders" ],
        "description" : "updates store order items",
        "operationId" : "updateStoreOrderItems",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StoreOrderItem"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/storeOrders" : {
      "get" : {
        "tags" : [ "store orders" ],
        "description" : "lists all store orders",
        "operationId" : "getStoreOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minCreateTime",
          "in" : "query",
          "description" : "min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxCreateTime",
          "in" : "query",
          "description" : "max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "targetOrganizationalUnit",
          "in" : "query",
          "description" : "target organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minFinishTime",
          "in" : "query",
          "description" : "min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxFinishTime",
          "in" : "query",
          "description" : "max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "minPickUpTime",
          "in" : "query",
          "description" : "min (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxPickUpTime",
          "in" : "query",
          "description" : "max (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListStoreOrder"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "store orders" ],
        "description" : "adds store orders",
        "operationId" : "addStoreOrders",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StoreOrder"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items/{productId}" : {
      "get" : {
        "tags" : [ "store orders" ],
        "description" : "returns the single store order item",
        "operationId" : "getStoreOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoreOrderItem"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "store orders" ],
        "description" : "deletes the single store order item",
        "operationId" : "deleteStoreOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "store orders" ],
        "description" : "updates the single store order item",
        "operationId" : "updateStoreOrderItem",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StoreOrderItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/storeOrders/{storeOrderId}" : {
      "get" : {
        "tags" : [ "store orders" ],
        "description" : "returns a single store order",
        "operationId" : "getStoreOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoreOrder"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "store orders" ],
        "description" : "updates the single store order",
        "operationId" : "updateStoreOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "data to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StoreOrder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/order" : {
      "patch" : {
        "tags" : [ "store orders" ],
        "description" : "orders and finalizes the store order",
        "operationId" : "orderStoreOrder",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storeOrderId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderAction",
          "in" : "query",
          "description" : "type of order finalization. according to items speficiations (either each item must have a source, or those without are ignored and deleted) or regardless of items specifications (joint supplier or warehouse)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ACCORDING_TO_SPECIFICATIONS", "ACCORDING_TO_SPECIFICATIONS_IGNORE_AND_DELETE", "REGARDLESS_OF_SPECIFICATIONS_AT_JOINT_FROM_SUPPLIER", "REGARDLESS_OF_SPECIFICATIONS_AT_JOINT_FROM_WAREHOUSE" ]
          }
        }, {
          "name" : "warehouse",
          "in" : "query",
          "description" : "warehouse (= organizational unit having warehouse flag)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "supplier",
          "in" : "query",
          "description" : "supplier",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          },
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MethodNotAllowedErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/suppliers" : {
      "get" : {
        "tags" : [ "suppliers" ],
        "description" : "lists all suppliers",
        "operationId" : "getSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListSupplier"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "suppliers" ],
        "description" : "adds a batch of new suppliers",
        "operationId" : "addSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new suppliers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "suppliers" ],
        "description" : "deletes a batch of suppliers",
        "operationId" : "deleteSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing suppliers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "suppliers" ],
        "description" : "updates a batch of suppliers",
        "operationId" : "updateSuppliers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing suppliers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/suppliers/{supplierId}" : {
      "get" : {
        "tags" : [ "suppliers" ],
        "description" : "returns the single supplier",
        "operationId" : "getSupplier",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "supplierId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Supplier"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/tags" : {
      "get" : {
        "tags" : [ "tags" ],
        "description" : "lists all tags",
        "operationId" : "getTags",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListTag"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "tags" ],
        "description" : "adds a batch of new tags",
        "operationId" : "addTags",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new tags",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "tags" ],
        "description" : "deletes a batch of tags",
        "operationId" : "deleteTags",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing tags (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "tags" ],
        "description" : "updates a batch of tags",
        "operationId" : "updateTags",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing tags (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/tags/{tagId}" : {
      "get" : {
        "tags" : [ "tags" ],
        "description" : "returns the single tag",
        "operationId" : "getTag",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "tags" ],
        "description" : "deletes the single tag",
        "operationId" : "deleteTag",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "tags" ],
        "description" : "updates the single tag",
        "operationId" : "updateTag",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the tag",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/ticketDefinitions" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "lists all ticket definitions",
        "operationId" : "getTicketDefinitions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListTicketDefinition"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "adds a batch of new ticket definitions",
        "operationId" : "addTicketDefinitions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new ticket definitions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TicketDefinition"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "deletes a batch of ticket definitions",
        "operationId" : "deleteTicketDefinitions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing ticket definitions (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TicketDefinition"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "ticketing" ],
        "description" : "updates a batch of ticket definitions",
        "operationId" : "updateTicketDefinitions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing ticket definitions (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TicketDefinition"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "returns the single ticket definition",
        "operationId" : "getTicketDefinition",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketDefinitionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "deletes the single ticket definition",
        "operationId" : "deleteTicketDefinition",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketDefinitionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/tickets" : {
      "get" : {
        "tags" : [ "ticketing" ],
        "description" : "lists all tickets",
        "operationId" : "getTickets",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ticketNumber",
          "in" : "query",
          "description" : "ticket number",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customerNumber",
          "in" : "query",
          "description" : "customer number",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "creationDateFrom",
          "in" : "query",
          "description" : "creation date from",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "creationDateTo",
          "in" : "query",
          "description" : "creation date to",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "locked",
          "in" : "query",
          "description" : "is ticket locked",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "ownerLastName",
          "in" : "query",
          "description" : "last name of owner",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ownerFirstName",
          "in" : "query",
          "description" : "first name of owner",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "loadOwnerImage",
          "in" : "query",
          "description" : "set true if you want to load the owner's image",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListTicket"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/tickets/{ticketNumber}" : {
      "post" : {
        "tags" : [ "ticketing" ],
        "description" : "unlocks the single ticket",
        "operationId" : "unlockTicket",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketNumber",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "ticketing" ],
        "description" : "locks the single ticket",
        "operationId" : "lockTicket",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketNumber",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "ticketing" ],
        "description" : "updates the single ticket",
        "operationId" : "updateTicket",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketNumber",
          "in" : "path",
          "description" : "old ticket number",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newTicketNumber",
          "in" : "query",
          "description" : "new ticket number",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "firstName",
          "in" : "query",
          "description" : "ticket owner's first name",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "ticket owner's last name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/timeTrackingEntities" : {
      "get" : {
        "tags" : [ "time tracking" ],
        "description" : "lists time tracking entities",
        "operationId" : "getTimeTrackingEntities",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListTimeTrackingEntity"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "time tracking" ],
        "description" : "adds a batch of new time tracking entities",
        "operationId" : "addTimeTrackingEntities",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new time tracking entities",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TimeTrackingEntity"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}" : {
      "get" : {
        "tags" : [ "time tracking" ],
        "description" : "returns a single time tracking entity",
        "operationId" : "getTimeTrackingEntity",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timeTrackingEntityId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeTrackingEntity"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/timeTrackingEntries" : {
      "get" : {
        "tags" : [ "time tracking" ],
        "description" : "lists time tracking entries",
        "operationId" : "getTimeTrackingEntries",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "timeTrackingEntity",
          "in" : "query",
          "description" : "time tracking entity id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cashier",
          "in" : "query",
          "description" : "cashier id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "organizationalUnit",
          "in" : "query",
          "description" : "organizational unit",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minTimestamp",
          "in" : "query",
          "description" : "min (inclusive) timestamp (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "maxTimestamp",
          "in" : "query",
          "description" : "max (inclusive) timestamp (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListTimeTrackingEntry"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "time tracking" ],
        "description" : "adds a batch of new time tracking entries",
        "operationId" : "addTimeTrackingEntries",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new time tracking entries",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TimeTrackingEntry"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}" : {
      "get" : {
        "tags" : [ "time tracking" ],
        "description" : "returns a single time tracking entry",
        "operationId" : "getTimeTrackingEntry",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "timeTrackingEntryId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeTrackingEntry"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/userRoles" : {
      "get" : {
        "tags" : [ "user roles" ],
        "description" : "lists all user roles",
        "operationId" : "getUserRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListUserRole"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "user roles" ],
        "description" : "adds a batch of new user roles",
        "operationId" : "addUserRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new user roles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user roles" ],
        "description" : "deletes a batch of user roles",
        "operationId" : "deleteUserRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing user roles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "user roles" ],
        "description" : "updates a batch of user roles",
        "operationId" : "updateUserRoles",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing user roles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/userRoles/{userRoleId}" : {
      "get" : {
        "tags" : [ "user roles" ],
        "description" : "returns the single user role",
        "operationId" : "getUserRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user roles" ],
        "description" : "deletes the single user role",
        "operationId" : "deleteUserRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "user roles" ],
        "description" : "updates the single user role",
        "operationId" : "updateUserRole",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userRoleId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the user role",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRole"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/users" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "lists all users",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListUser"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "users" ],
        "description" : "adds a batch of new users",
        "operationId" : "addUsers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "an array of new users",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "users" ],
        "description" : "deletes a batch of users",
        "operationId" : "deleteUsers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing users",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "users" ],
        "description" : "updates a batch of users",
        "operationId" : "updateUsers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing users",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/users/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "returns the single user",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "users" ],
        "description" : "deletes the single user",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "users" ],
        "description" : "updates the single user",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the user",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/voucherConfigurations" : {
      "get" : {
        "tags" : [ "voucher configurations" ],
        "description" : "lists all voucher configurations",
        "operationId" : "getVoucherConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListVoucherConfiguration"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "voucher configurations" ],
        "description" : "adds a batch of new voucher configurations",
        "operationId" : "addVoucherConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new voucher configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VoucherConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "voucher configurations" ],
        "description" : "deletes a batch of voucher configurations",
        "operationId" : "deleteVoucherConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing voucher configurations (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VoucherConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "voucher configurations" ],
        "description" : "updates a batch of voucher configurations; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateVoucherConfigurations",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing voucher configurations",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VoucherConfiguration"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/voucherConfigurations/{voucherConfigurationId}" : {
      "get" : {
        "tags" : [ "voucher configurations" ],
        "description" : "returns the single voucher configuration",
        "operationId" : "getVoucherConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VoucherConfiguration"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "voucher configurations" ],
        "description" : "deletes the single voucher configuration",
        "operationId" : "deleteVoucherConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "voucher configurations" ],
        "description" : "updates the single voucher configuration",
        "operationId" : "updateVoucherConfiguration",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherConfigurationId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the voucher",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoucherConfiguration"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/vouchers/{voucherId}/transactions" : {
      "get" : {
        "tags" : [ "vouchers" ],
        "description" : "returns all voucher transaction of specified voucher",
        "operationId" : "getVoucherVoucherTransactions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListVoucherTransaction"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "vouchers" ],
        "description" : "adds a batch of new voucher transactions",
        "operationId" : "addVoucherVoucherTransactions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of new voucher transactions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VoucherTransaction"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "vouchers" ],
        "description" : "updates a batch of vouchers; [id] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateVoucherVoucherTransactions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing voucher transactions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VoucherTransaction"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/vouchers" : {
      "get" : {
        "tags" : [ "vouchers" ],
        "description" : "lists all vouchers",
        "operationId" : "getVouchers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "includeDeleted",
          "in" : "query",
          "description" : "indicates deleted objects should be loaded or not (default: false)",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "voucher configuration id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "customer",
          "in" : "query",
          "description" : "voucher configuration id to filter by",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "number",
          "in" : "query",
          "description" : "number of the related object",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListVoucher"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "vouchers" ],
        "description" : "adds a batch of new vouchers",
        "operationId" : "addVouchers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "upsert",
          "in" : "query",
          "description" : "when set to true, updates the object instead of generating a already-exists-error; deprecated, use writeMode ADD_OR_UPDATE instead",
          "deprecated" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "writeMode",
          "in" : "query",
          "description" : "DEFAULT = insert; ADD_OR_UPDATE = insert or update, overwrite all non-null fields; ADD_OR_REPLACE = insert or update, overwrite all fields",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ADD_OR_UPDATE", "ADD_OR_REPLACE" ]
          }
        } ],
        "requestBody" : {
          "description" : "array of new vouchers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Voucher"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "vouchers" ],
        "description" : "deletes a batch of vouchers",
        "operationId" : "deleteVouchers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "array of existing vouchers (id or number required)",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Voucher"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "vouchers" ],
        "description" : "updates a batch of vouchers; [number] must be set in the objects, otherwise the object cannot be updated",
        "operationId" : "updateVouchers",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "an array of existing vouchers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Voucher"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddOrUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/vouchers/{voucherId}" : {
      "get" : {
        "tags" : [ "vouchers" ],
        "description" : "returns the single voucher",
        "operationId" : "getVoucher",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Voucher"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "vouchers" ],
        "description" : "deletes the single voucher",
        "operationId" : "deleteVoucher",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, delete on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "vouchers" ],
        "description" : "updates the single voucher; if [number] is set, the number of the object will change and the resource location as well",
        "operationId" : "updateVoucher",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the voucher",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Voucher"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/vouchers/{voucherId}/transactions/{voucherTransactionId}" : {
      "get" : {
        "tags" : [ "vouchers" ],
        "description" : "returns the single voucher transaction",
        "operationId" : "getVoucherVoucherTransaction",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherTransactionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VoucherTransaction"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "vouchers" ],
        "description" : "updates the voucher transaction",
        "operationId" : "updateVoucherVoucherTransaction",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherTransactionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "the properties to update of the voucher transaction",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VoucherTransaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/vouchers/{voucherId}/transactions/{voucherTransactionId}/void" : {
      "patch" : {
        "tags" : [ "vouchers" ],
        "description" : "voids the voucher transaction",
        "operationId" : "voidVoucherVoucherTransaction",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherTransactionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, patch on single resource does not return any content"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/voucherTransactions/{voucherTransactionId}" : {
      "get" : {
        "tags" : [ "voucher transactions" ],
        "description" : "returns the single voucher transaction",
        "operationId" : "getVoucherTransaction",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "voucherTransactionId",
          "in" : "path",
          "description" : "id of the related object (important: id should match the uuid-format)",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VoucherTransaction"
                }
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/accounts/{koronaAccountId}/voucherTransactions" : {
      "get" : {
        "tags" : [ "voucher transactions" ],
        "description" : "returns all voucher transactions",
        "operationId" : "getVoucherTransactions",
        "parameters" : [ {
          "name" : "koronaAccountId",
          "in" : "path",
          "description" : "account id of the KORONA.cloud account",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "number of the page to fetch",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "amount of objects to return per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "attribute to sort by (multiple separated by comma; max. 5)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "revision",
          "in" : "query",
          "description" : "last revision number, objects with a greater revision than this will be returned",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Malformed querystring or model",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BadRequestErrorModel"
                }
              }
            }
          },
          "401" : {
            "description" : "Missing or invalid http-authentication"
          },
          "403" : {
            "description" : "Requested action is not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ForbiddenErrorModel"
                }
              }
            }
          },
          "404" : {
            "description" : "Object not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotFoundErrorModel"
                }
              }
            }
          },
          "429" : {
            "description" : "Too many requests in a specified period",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TooManyRequestsErrorModel"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResultListVoucherTransaction"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BadRequestErrorModel" : {
        "properties" : {
          "message" : {
            "description" : "a short description of the error in english"
          },
          "code" : {
            "description" : "the code for client-side evaluation of the error",
            "enum" : [ "BATCH_SIZE_OUT_OF_RANGE", "DATE_NOT_EXISTS", "INVALID_MODEL_PROPERTY", "INVALID_QUERY_PARAMETER", "MALFORMED_MODEL_ID_OR_DATE", "MALFORMED_MODEL_ID_OR_NUMBER", "MISSING_MODEL", "MISSING_QUERY_PARAMETER", "NUMBER_ALREADY_IN_USE", "NUMBER_NOT_EXISTS", "SUBMITTED_DATA_NOT_WELLFORMED", "UNRESOLVED_RELATION" ]
          }
        },
        "description" : "BadRequestError"
      },
      "ForbiddenErrorModel" : {
        "properties" : {
          "message" : {
            "description" : "a short description of the error in english"
          },
          "code" : {
            "description" : "the code for client-side evaluation of the error",
            "enum" : [ "CLOUD_ACCOUNT_DISABLED", "POINT_OF_SALE_NOT_EXTERNAL", "POINT_OF_SALE_NOT_COUPLED", "POINT_OF_SALE_COUPLED_WITH_OTHER_DEVICE", "DELETE_NOT_ALLOWED", "SAVE_OR_UPDATE_NOT_ALLOWED", "ADDITIONAL_CLOUD_PACKAGE_REQUIRED", "ADDITIONAL_API_ACCESS_REQUIRED", "API_USAGE_DISABLED" ]
          }
        },
        "description" : "ForbiddenError"
      },
      "NotFoundErrorModel" : {
        "properties" : {
          "message" : {
            "description" : "a short description of the error in english"
          },
          "code" : {
            "description" : "the code for client-side evaluation of the error",
            "enum" : [ "ACCOUNT_NOT_FOUND", "MODEL_ID_NOT_FOUND", "NUMBER_NOT_FOUND", "DATE_NOT_FOUND", "INDEX_NOT_FOUND", "CONDITION_MISMATCH" ]
          }
        },
        "description" : "NotFoundError"
      },
      "TooManyRequestsErrorModel" : {
        "properties" : {
          "message" : {
            "description" : "a short description of the error in english"
          },
          "code" : {
            "description" : "the code for client-side evaluation of the error",
            "enum" : [ "DAILY_LIMIT_EXCEEDED", "TOO_MANY_PARALLEL_UPDATE_REQUESTS" ]
          }
        },
        "description" : "TooManyRequestsError"
      },
      "AddOrUpdateResult" : {
        "properties" : {
          "action" : {
            "enum" : [ "ADDED", "DELETED", "QUEUED", "UPDATED", "NONE" ]
          },
          "href" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "status" : {
            "enum" : [ "ERROR", "OK" ]
          }
        }
      },
      "Account" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "cashJournalRelevant" : {
            "type" : "boolean"
          },
          "denominationInput" : {
            "type" : "boolean"
          },
          "exclusive" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "producer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "requiresSerialNumber" : {
            "type" : "boolean"
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DEPOSIT", "WITHDRAWAL" ]
          },
          "showTransactionOnCustomerDisplay" : {
            "type" : "boolean"
          },
          "invertInCashJournal" : {
            "type" : "boolean"
          },
          "fiscalExportBusinessCase" : {
            "type" : "string",
            "enum" : [ "OPENING_BALANCE", "ADVANCE_PAYMENT_LIQUIDATION", "ADVANCE_PAYMENT_CESSATION", "SURCHARGE", "DISBURSEMENT", "DIFFERENCE_TARGET_ACTUAL", "PAYMENT", "SINGLE_USE_VOUCHER_PAYMENT", "SINGLE_USE_VOUCHER_PURCHASE", "CLAIM_REDEMPTION", "CLAIM_ORIGINATION", "MONEY_TRANSIT", "WAGE_PAYMENT", "VALUE_VOUCHER_PAYMENT", "VALUE_VOUCHER_PURCHASE", "DEPOSIT", "DEPOSIT_REFUND", "PRIVATE_INSERT", "PRIVATE_WITHDRAWEL", "DISCOUNT", "TIP_EMPLOYER", "TIP_EMPLOYEE", "REVENUE", "GRANT_REAL", "GRANT_UNREAL" ]
          }
        }
      },
      "ModelReference" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx). recommended to use for linking purposes. will never change.",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "name, like it is set in backoffice"
          },
          "number" : {
            "type" : "string",
            "description" : "number, like it is set in backoffice"
          }
        },
        "description" : "generic model for representation of id, number and name containing model purposes"
      },
      "ResultListAccount" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Account"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "AdditionalReceiptInfoType" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "cashierInputRequired" : {
            "type" : "boolean"
          },
          "customerGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "description" : {
            "type" : "string"
          },
          "minItemQuantity" : {
            "type" : "number"
          },
          "minTotal" : {
            "type" : "number"
          },
          "options" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "required" : {
            "type" : "boolean"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "validity" : {
            "$ref" : "#/components/schemas/Validity"
          },
          "pointsOfSale" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "pointsOfSaleSelectionMode" : {
            "type" : "string",
            "enum" : [ "INCLUDE", "EXCLUDE" ]
          }
        }
      },
      "DayTimePeriod" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string"
          },
          "to" : {
            "type" : "string"
          }
        }
      },
      "TotalPeriod" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "to" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "Validity" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "$ref" : "#/components/schemas/DayTimePeriod"
          },
          "daysOfMonth" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "daysOfWeek" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
            }
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPeriod"
          }
        }
      },
      "ResultListAdditionalReceiptInfoType" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/AdditionalReceiptInfoType"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Assortment" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "costCenter" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "description" : {
            "type" : "string"
          },
          "lastCleanUp" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListAssortment" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Assortment"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Attendance" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "categoryName" : {
            "type" : "string"
          },
          "categoryId" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "event" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "expirationTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "seats" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "result list"
      },
      "ResultListAttendance" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Attendance"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CashierRole" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "permissions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BLANK_RECEIPT", "CANCEL_ITEM", "CANCEL_LAST_RECEIPT_ITEM", "CANCEL_RECEIPT", "DELETE_RECEIPT", "EXTERNAL_POINT_OF_SALE", "FOREIGN_RECEIPT", "MDE_ADMIN", "PRICE", "REPORTS", "RETURN", "REVISION", "TERMINATE_BREAK_LOCK", "CASH_DRAWER" ]
            }
          }
        }
      },
      "ResultListCashierRole" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CashierRole"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Cashier" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "alias" : {
            "type" : "string"
          },
          "deactivated" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "MALE", "FEMALE" ]
          },
          "loginCode" : {
            "type" : "string",
            "description" : "by default, the md5 hash of the cashiers login code. on GET requests this can be changed via the `displayCashierCredentials=(HASH|PLAIN|NONE)` parameter, on POST and PATCH it is always assumed to be `PLAIN` text."
          },
          "loginPassword" : {
            "type" : "string",
            "description" : "by default, the md5 hash of the cashiers login password. on GET requests this can be changed via the `displayCashierCredentials=(HASH|PLAIN|NONE)` parameter, on POST and PATCH it is always assumed to be `PLAIN` text."
          },
          "permissions" : {
            "uniqueItems" : true,
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "readOnly" : true,
              "enum" : [ "BLANK_RECEIPT", "CANCEL_ITEM", "CANCEL_LAST_RECEIPT_ITEM", "CANCEL_RECEIPT", "DELETE_RECEIPT", "EXTERNAL_POINT_OF_SALE", "FOREIGN_RECEIPT", "MDE_ADMIN", "PRICE", "REPORTS", "RETURN", "REVISION", "TERMINATE_BREAK_LOCK", "CASH_DRAWER" ]
            }
          },
          "role" : {
            "type" : "string",
            "readOnly" : true
          },
          "bonusPoints" : {
            "type" : "integer",
            "format" : "int64"
          },
          "backgroundColor" : {
            "type" : "integer",
            "format" : "int32"
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "cashierRole" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "readOnly" : true,
            "example" : "2018-11-22"
          },
          "lastReceiptTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "readOnly" : true,
            "example" : "2018-11-22"
          },
          "organizationalUnitSpecificNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationalUnitSpecificNumber"
            }
          },
          "organizationalUnitRoles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReferencePair"
            }
          }
        }
      },
      "ModelReferencePair" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "value" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "OrganizationalUnitSpecificNumber" : {
        "type" : "object",
        "properties" : {
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "number" : {
            "type" : "string"
          }
        }
      },
      "ResultListCashier" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Cashier"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CashierVerificationRequirement" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "questionText" : {
            "type" : "string"
          },
          "requiredAge" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "AGE", "OK", "OPTION_SELECTION", "YES_NO" ]
          },
          "triggerOn" : {
            "type" : "string",
            "enum" : [ "SELL", "RETURN", "ALWAYS" ]
          },
          "answerOptions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "failureText" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListCashierVerificationRequirement" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CashierVerificationRequirement"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CommodityGroup" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "parentCommodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListCommodityGroup" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CommodityGroup"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ContraAccount" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          }
        }
      },
      "ResultListContraAccount" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ContraAccount"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CostCenter" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          }
        }
      },
      "ResultListCostCenter" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CostCenter"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Coupon" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "promotion" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "redemptionCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "creationTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "external" : { }
        },
        "description" : "result list"
      },
      "ResultListCoupon" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Coupon"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CreationTask" : {
        "properties" : {
          "entryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "ticketNumberStart" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "created" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "enum" : [ "PREPARED", "RUNNING", "FINISHED", "FAILED" ]
          },
          "productNumber" : {
            "type" : "string"
          },
          "personalization" : {
            "$ref" : "#/components/schemas/TicketPersonalization"
          },
          "ticketData" : {
            "$ref" : "#/components/schemas/TicketData"
          }
        },
        "description" : "result list"
      },
      "TicketData" : {
        "properties" : {
          "dailyValidFrom" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "13:37:00"
          },
          "dailyValidTo" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "13:37:00"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "validTo" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "maxPossibleAdmissions" : {
            "type" : "integer",
            "format" : "int32"
          },
          "entryGateNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ticketNumberPrefix" : {
            "type" : "string"
          },
          "daysBlockedAfterUse" : {
            "type" : "integer",
            "format" : "int32"
          },
          "activationDelay" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "validityPeriodAfterPurchase" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "validityPeriodAfterEntrance" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        }
      },
      "TicketPersonalization" : {
        "properties" : {
          "firstname" : {
            "type" : "string"
          },
          "lastname" : {
            "type" : "string"
          },
          "customerNumber" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string",
            "format" : "byte"
          }
        }
      },
      "TimePeriod" : {
        "type" : "object",
        "properties" : {
          "days" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "months" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seconds" : {
            "type" : "integer",
            "format" : "int32"
          },
          "weeks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ResultListCreationTask" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CreationTask"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Currency" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "centName" : {
            "type" : "string"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "denominations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CurrencyDenomination"
            }
          },
          "exchangeRates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CurrencyExchangeRate"
            }
          },
          "key" : {
            "type" : "string"
          },
          "maxPaymentInput" : {
            "type" : "number"
          },
          "name" : {
            "type" : "string"
          },
          "symbol" : {
            "type" : "string"
          },
          "systemCurrency" : {
            "type" : "boolean",
            "readOnly" : true
          }
        }
      },
      "CurrencyDenomination" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "COIN", "BANKNOTE" ]
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "CurrencyExchangeRate" : {
        "type" : "object",
        "properties" : {
          "factor" : {
            "type" : "number"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "ResultListCurrency" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Currency"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CustomerDisplayConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "fontScale" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "bookingUrl" : {
            "type" : "string"
          },
          "bookingImage" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingImageId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "closedUrl" : {
            "type" : "string"
          },
          "closedText" : {
            "type" : "string"
          },
          "closedImage" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "closedImageId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "welcomeText" : {
            "type" : "string"
          },
          "welcomeUrl" : {
            "type" : "string"
          },
          "welcomeImage" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "welcomeImageId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "graphicalDisplay" : {
            "type" : "string",
            "enum" : [ "NONE", "DISPLAY_1", "DISPLAY_2", "DISPLAY_3", "DISPLAY_4" ]
          },
          "layoutType" : {
            "type" : "string",
            "enum" : [ "AD_FULL", "AD_FULL_WITH_LINE_DISPLAY", "AD_LEFT", "AD_LEFT_HALF", "AD_NONE", "AD_RIGHT", "AD_RIGHT_HALF" ]
          },
          "welcomeLayoutType" : {
            "type" : "string",
            "enum" : [ "AD_FULL", "AD_FULL_WITH_LINE_DISPLAY", "AD_LEFT", "AD_LEFT_HALF", "AD_NONE", "AD_RIGHT", "AD_RIGHT_HALF" ]
          },
          "closedLayoutType" : {
            "type" : "string",
            "enum" : [ "AD_FULL", "AD_FULL_WITH_LINE_DISPLAY", "AD_LEFT", "AD_LEFT_HALF", "AD_NONE", "AD_RIGHT", "AD_RIGHT_HALF" ]
          },
          "bookingLayoutType" : {
            "type" : "string",
            "enum" : [ "AD_FULL", "AD_FULL_WITH_LINE_DISPLAY", "AD_LEFT", "AD_LEFT_HALF", "AD_NONE", "AD_RIGHT", "AD_RIGHT_HALF" ]
          },
          "themeColor" : {
            "type" : "string",
            "enum" : [ "GREY", "RED", "PINK", "PURPLE", "DEEP_PURPLE", "INDIGO", "BLUE", "LIGHT_BLUE", "CYAN", "TEAL", "GREEN", "LIGHT_GREEN", "LIME", "YELLOW", "AMBER", "ORANGE", "DEEP_ORANGE", "BROWN" ]
          }
        }
      },
      "ResultListCustomerDisplayConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CustomerDisplayConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CustomerGroup" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "priceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListCustomerGroup" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CustomerGroup"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "CustomerData" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          }
        }
      },
      "CustomerOrder" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "customerData" : {
            "$ref" : "#/components/schemas/CustomerData"
          },
          "deposits" : {
            "type" : "array",
            "description" : "an empty list will not delete existing deposits and will result in an error",
            "items" : {
              "$ref" : "#/components/schemas/Deposit"
            }
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerOrderItem"
            }
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "pickUpTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "readyForPickUp" : {
            "type" : "boolean"
          },
          "warehouse" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "CustomerOrderItem" : {
        "type" : "object",
        "properties" : {
          "attendance" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "description" : {
            "type" : "string"
          },
          "discounts" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Discount"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "indent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "manualPrice" : {
            "type" : "boolean"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "serialNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          }
        }
      },
      "Deposit" : {
        "type" : "object",
        "properties" : {
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "amount" : {
            "type" : "number"
          },
          "receiptNumber" : {
            "type" : "string"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        },
        "description" : "an empty list will not delete existing deposits and will result in an error"
      },
      "Discount" : {
        "properties" : {
          "coupons" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscountCoupon"
            }
          },
          "label" : {
            "type" : "string"
          },
          "promotion" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "receiptDiscount" : {
            "type" : "boolean"
          },
          "value" : {
            "type" : "number"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "DiscountCoupon" : {
        "properties" : {
          "external" : {
            "type" : "boolean"
          },
          "number" : {
            "type" : "string"
          }
        },
        "readOnly" : true
      },
      "TaxPayment" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "taxRate" : {
            "type" : "number"
          },
          "included" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "salesTax" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        },
        "description" : "taxPayments: detailed tax information. could also be used to calculate the gross and net price depending on the base price"
      },
      "TotalPrice" : {
        "required" : [ "base" ],
        "type" : "object",
        "properties" : {
          "base" : {
            "type" : "number",
            "description" : "base price: price of the receipt or itemrow, excluded not included taxes, included discount. example: 19% tax included, 2€ discount included",
            "example" : 10
          },
          "discount" : {
            "type" : "number",
            "description" : "discount: discount amount of the receipt or item row. base + discount = undiscounted base price.",
            "example" : 2
          },
          "gross" : {
            "type" : "number",
            "description" : "gross price: base + not includes taxes. example: 19% tax included, 7% tax excluded",
            "example" : 10.7
          },
          "net" : {
            "type" : "number",
            "description" : "base price: price of the receipt or itemrow, excluded all taxes. example: every tax excluded",
            "example" : 8.4
          },
          "taxPayments" : {
            "type" : "array",
            "description" : "taxPayments: detailed tax information. could also be used to calculate the gross and net price depending on the base price",
            "items" : {
              "$ref" : "#/components/schemas/TaxPayment"
            }
          }
        },
        "description" : "Contains all price-related information"
      },
      "ResultListCustomerOrder" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/CustomerOrder"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "AddressInformation" : {
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "type" : "string"
          },
          "addressLine2" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "company" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "department" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          }
        }
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressInformation"
          },
          "birthday" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cards" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerCard"
            }
          },
          "company" : {
            "type" : "string"
          },
          "customerGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "economicZone" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "email" : {
            "type" : "string"
          },
          "externalId" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "string",
            "enum" : [ "MALE", "FEMALE" ]
          },
          "informations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerInformation"
            }
          },
          "lastname" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "taxId" : {
            "type" : "string"
          },
          "privacyPolicyAccepted" : {
            "type" : "boolean"
          },
          "marketingContactPermitted" : {
            "type" : "boolean"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "readOnly" : true,
            "example" : "2018-11-22"
          },
          "lastReceiptTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "readOnly" : true,
            "example" : "2018-11-22"
          },
          "useEmailForDigitalReceipt" : {
            "type" : "boolean"
          },
          "lockDeliveryNoteSales" : {
            "type" : "boolean"
          }
        }
      },
      "CustomerCard" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT", "FRIENDSBONUS" ]
          }
        }
      },
      "CustomerInformation" : {
        "type" : "object",
        "properties" : {
          "creatorName" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "ResultListCustomer" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Customer"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DataExchangeConfiguration" : {
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "configurations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "description" : "result list"
      },
      "ResultListDataExchangeConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DataExchangeConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DeliveryNote" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "deliveryTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "finalized" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeliveryNoteItem"
            }
          },
          "signature" : {
            "$ref" : "#/components/schemas/Signature"
          },
          "customerOrder" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        },
        "description" : "result list"
      },
      "DeliveryNoteItem" : {
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "serialNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "indent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "voucherTransactionReference" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "Signature" : {
        "properties" : {
          "image" : {
            "type" : "string",
            "format" : "byte"
          },
          "transcription" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "ResultListDeliveryNote" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DeliveryNote"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DeviceConfigurationVariable" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListDeviceConfigurationVariable" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DeviceConfigurationVariable"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DiscountLevel" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        },
        "description" : "result list"
      },
      "DiscountConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "discountCalculationType" : {
            "type" : "string",
            "enum" : [ "ALL_SALES", "DISCOUNTABLE_SALES" ]
          },
          "discountLevels" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscountConfigurationCustomDiscountLevel"
            }
          },
          "systemDiscountLevels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DiscountConfigurationSystemDiscountLevel"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "DiscountConfigurationCustomDiscountLevel" : {
        "type" : "object",
        "properties" : {
          "discountLevel" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "readOnly" : true
      },
      "DiscountConfigurationSystemDiscountLevel" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "SALE", "SPECIAL_OFFER_SCRIPT", "RECEIPT" ]
          },
          "level" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ResultListDiscountLevel" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DiscountLevel"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListDiscountConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DiscountConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "MethodNotAllowedErrorModel" : {
        "properties" : {
          "message" : {
            "description" : "a short description of the error in english"
          },
          "code" : {
            "description" : "the code for client-side evaluation of the error",
            "enum" : [ "NOT_PERMITTED" ]
          }
        },
        "description" : "MethodNotAllowedError"
      },
      "DispatchNotificationItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string"
          },
          "shelfLife" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "amount" : {
            "$ref" : "#/components/schemas/DispatchNotificationItemAmount"
          },
          "identification" : {
            "$ref" : "#/components/schemas/DispatchNotificationItemIdentification"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "container" : {
            "$ref" : "#/components/schemas/DispatchNotificationItemContainer"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "importData" : {
            "$ref" : "#/components/schemas/DispatchNotificationItemImport"
          }
        }
      },
      "DispatchNotificationItemAmount" : {
        "type" : "object",
        "properties" : {
          "ordered" : {
            "type" : "number"
          },
          "delivered" : {
            "type" : "number"
          }
        }
      },
      "DispatchNotificationItemContainer" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          }
        }
      },
      "DispatchNotificationItemIdentification" : {
        "type" : "object",
        "properties" : {
          "buyer" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "supplier" : {
            "type" : "string"
          }
        }
      },
      "DispatchNotificationItemImport" : {
        "type" : "object",
        "properties" : {
          "assortment" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "name" : {
            "type" : "string"
          },
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductPrice"
            }
          },
          "codes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductCode"
            }
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "supplierPrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSupplierPrice"
            }
          }
        }
      },
      "ProductCode" : {
        "type" : "object",
        "properties" : {
          "productCode" : {
            "type" : "string"
          },
          "containerSize" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "ProductPrice" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "the price of the product if [productCode] or [validFrom] matches"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "start date the price is valid from. [productCode] or [validFrom] is required, but not both.",
            "format" : "date-time"
          },
          "productCode" : {
            "type" : "string",
            "description" : "product code the price is valid for. [productCode] or [validFrom] is required, but not both."
          },
          "priceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "number" : {
            "type" : "string"
          }
        }
      },
      "ProductSupplierPrice" : {
        "type" : "object",
        "properties" : {
          "supplier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "orderCode" : {
            "type" : "string"
          },
          "value" : {
            "type" : "number"
          },
          "containerSize" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "CompanyIdentification" : {
        "type" : "object",
        "properties" : {
          "gln" : {
            "type" : "string"
          },
          "taxId" : {
            "type" : "string"
          }
        }
      },
      "Data" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/AddressInformation"
          },
          "identification" : {
            "$ref" : "#/components/schemas/CompanyIdentification"
          }
        },
        "description" : "ProductTransferInvolvedPartyInformationData"
      },
      "DispatchNotification" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "shippingDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "bookingUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingApiUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "description" : {
            "type" : "string"
          },
          "itemsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "partyInformation" : {
            "$ref" : "#/components/schemas/ProductTransferInvolvedPartyInformation"
          },
          "productStockOrder" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "sourceOrganizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }
      },
      "ProductTransferInvolvedPartyInformation" : {
        "type" : "object",
        "properties" : {
          "buyer" : {
            "$ref" : "#/components/schemas/Data"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Data"
          },
          "finalRecipient" : {
            "$ref" : "#/components/schemas/Data"
          },
          "invoiceRecipient" : {
            "$ref" : "#/components/schemas/Data"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/Data"
          },
          "transportServiceProvider" : {
            "$ref" : "#/components/schemas/Data"
          }
        }
      },
      "ResultListDispatchNotificationItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DispatchNotificationItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListDispatchNotification" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DispatchNotification"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "EconomicZone" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListEconomicZone" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/EconomicZone"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "EntryGate" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "hasChildren" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "parentEntryGate" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListEntryGate" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/EntryGate"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Capacity" : {
        "type" : "object",
        "properties" : {
          "available" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "total" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "externalId" : {
            "type" : "string"
          }
        }
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity"
          },
          "categories" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Category"
            }
          },
          "duration" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "location" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "start" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "ResultListEvent" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ExternalSystemCall" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "displayUrl" : {
            "type" : "string"
          },
          "displayUrlPost" : {
            "type" : "boolean"
          },
          "systemUrl" : {
            "type" : "string"
          },
          "login" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "connectTimeoutMillis" : {
            "type" : "integer",
            "format" : "int32"
          },
          "requestTimeoutMillis" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerDisplayUrl" : {
            "type" : "string"
          },
          "deactivated" : {
            "type" : "boolean",
            "readOnly" : true
          }
        }
      },
      "ResultListExternalSystemCall" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ExternalSystemCall"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "FiscalUnit" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "adminPin" : {
            "type" : "string"
          },
          "adminPuk" : {
            "type" : "string"
          },
          "certificate" : {
            "$ref" : "#/components/schemas/FiscalUnitCertificateInfo"
          },
          "logTimeFormat" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "processDataEncoding" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string",
            "description" : "public key of the fiscal unit. Value can only be set on create and is not changeable on update.",
            "format" : "byte"
          },
          "signatureAlgorithm" : {
            "type" : "string"
          },
          "state" : {
            "$ref" : "#/components/schemas/FiscalUnitState"
          },
          "timeAdminPin" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "EFSTA", "FISKALY", "SWISSBIT", "SWISSBIT_LAN" ]
          },
          "apiKey" : {
            "type" : "string"
          },
          "apiSecret" : {
            "type" : "string"
          },
          "remoteUrl" : {
            "type" : "string"
          },
          "tssClientUid" : {
            "type" : "string"
          }
        }
      },
      "FiscalUnitCertificateInfo" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "string",
            "description" : "log message certificate of the fiscal unit. Value can only be set on create and is not changeable on update.",
            "format" : "byte"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "reminderDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "FiscalUnitState" : {
        "type" : "object",
        "properties" : {
          "additionalInformation" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "errorDescription" : {
            "type" : "string"
          },
          "setupFailed" : {
            "type" : "boolean"
          },
          "usageLevel" : {
            "$ref" : "#/components/schemas/FiscalUnitStateUsageLevel"
          },
          "versions" : {
            "$ref" : "#/components/schemas/FiscalUnitStateVersionInfo"
          },
          "workingState" : {
            "type" : "string",
            "enum" : [ "DECOMMISSIONED", "INITIALIZED", "UNINITIALIZED" ]
          }
        }
      },
      "FiscalUnitStateUsageLevel" : {
        "type" : "object",
        "properties" : {
          "registeredClients" : {
            "$ref" : "#/components/schemas/FiscalUnitStateUsageLevelValue"
          },
          "createdSignatures" : {
            "$ref" : "#/components/schemas/FiscalUnitStateUsageLevelValue"
          },
          "storedBytes" : {
            "$ref" : "#/components/schemas/FiscalUnitStateUsageLevelValue"
          },
          "unfinishedTransactions" : {
            "$ref" : "#/components/schemas/FiscalUnitStateUsageLevelValue"
          }
        }
      },
      "FiscalUnitStateUsageLevelValue" : {
        "type" : "object",
        "properties" : {
          "current" : {
            "type" : "integer",
            "format" : "int64"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "FiscalUnitStateVersionInfo" : {
        "type" : "object",
        "properties" : {
          "api" : {
            "type" : "string"
          },
          "hardware" : {
            "type" : "string"
          },
          "software" : {
            "type" : "string"
          }
        }
      },
      "ResultListFiscalUnit" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/FiscalUnit"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Image" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "data" : {
            "type" : "string",
            "format" : "byte"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "PNG", "JPG" ]
          },
          "usageType" : {
            "type" : "string",
            "enum" : [ "PRODUCT", "PRINTER", "STATIONERY_THUMBNAIL", "CUSTOMER_DISPLAY" ]
          }
        }
      },
      "ResultListImage" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Image"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "InfoText" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "text" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ITEM", "POPUP", "RECEIPT", "RETURN_REASON" ]
          },
          "image" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListInfoText" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/InfoText"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Inventory" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "automaticBooking" : {
            "type" : "boolean"
          },
          "automaticBookingAfterDays" : {
            "type" : "integer",
            "description" : "only if isAutomaticBooking=true",
            "format" : "int32"
          },
          "checkProductAssortmentValidity" : {
            "type" : "boolean"
          },
          "checkProductListing" : {
            "type" : "boolean"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "description" : {
            "type" : "string"
          },
          "executionDays" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "only if type=PERPETUAL_INVENTORY",
            "items" : {
              "type" : "string",
              "description" : "only if type=PERPETUAL_INVENTORY",
              "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
            }
          },
          "executionTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "hasBookedReceipts" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "maxProductsPerList" : {
            "type" : "integer",
            "description" : "only if type=ANNUAL_INVENTORY | INVENTORY_IRREGULARITY",
            "format" : "int32"
          },
          "oneCommodityGroupPerInventoryList" : {
            "type" : "boolean",
            "description" : "only if type=ANNUAL_INVENTORY | INVENTORY_IRREGULARITY"
          },
          "onlyNegativeProductStocks" : {
            "type" : "boolean",
            "description" : "only if type=INVENTORY_IRREGULARITY"
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "productFilter" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "ALL", "DEACTIVATED" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ANNUAL_INVENTORY", "INVENTORY_IRREGULARITY", "INVENTORY_SAMPLING", "PERPETUAL_INVENTORY" ]
          }
        }
      },
      "InventoryListItem" : {
        "type" : "object",
        "properties" : {
          "averagePurchasePrice" : {
            "type" : "number"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "stock" : {
            "$ref" : "#/components/schemas/InventoryListItemStock"
          },
          "stockDifferenceReason" : {
            "type" : "string"
          }
        }
      },
      "InventoryListItemStock" : {
        "type" : "object",
        "properties" : {
          "actual" : {
            "type" : "number"
          },
          "nominal" : {
            "type" : "number"
          }
        }
      },
      "ResultListInventory" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Inventory"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "InventoryList" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "bookingUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingApiUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "description" : {
            "type" : "string"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "inventory" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "modifiedTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "status" : {
            "readOnly" : true,
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        },
        "description" : "result list"
      },
      "ResultListInventoryListItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/InventoryListItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListInventoryList" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/InventoryList"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ItemSequence" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListItemSequence" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ItemSequence"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "AccountMaxRevisions" : {
        "properties" : {
          "account" : {
            "type" : "integer",
            "format" : "int64"
          },
          "additionalReceiptInfoType" : {
            "type" : "integer",
            "format" : "int64"
          },
          "assortment" : {
            "type" : "integer",
            "format" : "int64"
          },
          "attendance" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cashier" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cashierRole" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cashierVerificationRequirement" : {
            "type" : "integer",
            "format" : "int64"
          },
          "commodityGroup" : {
            "type" : "integer",
            "format" : "int64"
          },
          "contraAccount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "costCenter" : {
            "type" : "integer",
            "format" : "int64"
          },
          "coupon" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currency" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customer" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerDisplayConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerGroup" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerOrder" : {
            "type" : "integer",
            "format" : "int64"
          },
          "dataExchangeConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryNote" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deviceConfigurationVariable" : {
            "type" : "integer",
            "format" : "int64"
          },
          "discountConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "discountLevel" : {
            "type" : "integer",
            "format" : "int64"
          },
          "dispatchNotification" : {
            "type" : "integer",
            "format" : "int64"
          },
          "dispatchNotificationItem" : {
            "type" : "integer",
            "format" : "int64"
          },
          "economicZone" : {
            "type" : "integer",
            "format" : "int64"
          },
          "endOfDayStatement" : {
            "type" : "integer",
            "format" : "int64"
          },
          "entryGate" : {
            "type" : "integer",
            "format" : "int64"
          },
          "event" : {
            "type" : "integer",
            "format" : "int64"
          },
          "externalSystemCall" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fiscalUnit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "image" : {
            "type" : "integer",
            "format" : "int64"
          },
          "infoText" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventory" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryList" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryListItem" : {
            "type" : "integer",
            "format" : "int64"
          },
          "itemSequence" : {
            "type" : "integer",
            "format" : "int64"
          },
          "language" : {
            "type" : "integer",
            "format" : "int64"
          },
          "loyaltyCard" : {
            "type" : "integer",
            "format" : "int64"
          },
          "numberRangeConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "orderPortalSupplier" : {
            "type" : "integer",
            "format" : "int64"
          },
          "organizationalUnit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentMethod" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentMethodCategory" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pos" : {
            "type" : "integer",
            "format" : "int64"
          },
          "posBalance" : {
            "type" : "integer",
            "format" : "int64"
          },
          "posButtonLayout" : {
            "type" : "integer",
            "format" : "int64"
          },
          "posPageLayoutConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "posProfile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "price" : {
            "type" : "integer",
            "format" : "int64"
          },
          "priceGroup" : {
            "type" : "integer",
            "format" : "int64"
          },
          "priceRule" : {
            "type" : "integer",
            "format" : "int64"
          },
          "product" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productionType" : {
            "type" : "integer",
            "format" : "int64"
          },
          "promotion" : {
            "type" : "integer",
            "format" : "int64"
          },
          "receipt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "receiptLayoutConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "reportFile" : {
            "type" : "integer",
            "format" : "int64"
          },
          "revenueAccount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "salesTax" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sector" : {
            "type" : "integer",
            "format" : "int64"
          },
          "specialPriceConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockAdjustment" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockAdjustmentItem" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockOrder" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockOrderItem" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockReceipt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stockReceiptItem" : {
            "type" : "integer",
            "format" : "int64"
          },
          "supplier" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tag" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ticketDefinition" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeTrackingEntity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "timeTrackingEntry" : {
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userRole" : {
            "type" : "integer",
            "format" : "int64"
          },
          "voucher" : {
            "type" : "integer",
            "format" : "int64"
          },
          "voucherConfiguration" : {
            "type" : "integer",
            "format" : "int64"
          },
          "voucherTransaction" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CloudSubscription" : {
        "properties" : {
          "status" : {
            "enum" : [ "ACTIVE", "FREE", "INACTIVE" ]
          },
          "validTo" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "CloudSubscriptionDetails" : {
        "properties" : {
          "amount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "packageType" : {
            "enum" : [ "FOOD", "FRANCHISE", "INTEGRATION", "INVOICING", "PLUS", "RETAIL", "SUPPORT", "TICKET", "VOUCHER", "TSS_BACKUP", "POS", "POS_10", "FISKALY_TSS" ]
          }
        }
      },
      "KoronaAccount" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "activePackageDetails" : {
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/components/schemas/CloudSubscriptionDetails"
            }
          },
          "activePackages" : {
            "uniqueItems" : true,
            "items" : {
              "enum" : [ "FOOD", "FRANCHISE", "INTEGRATION", "INVOICING", "PLUS", "RETAIL", "SUPPORT", "TICKET", "VOUCHER", "TSS_BACKUP", "POS", "POS_10", "FISKALY_TSS" ]
            }
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressInformation"
          },
          "cloudSubscription" : {
            "$ref" : "#/components/schemas/CloudSubscription"
          },
          "company" : {
            "type" : "string"
          },
          "identification" : {
            "$ref" : "#/components/schemas/CompanyIdentification"
          },
          "testMode" : {
            "type" : "boolean"
          },
          "defaultTimeZone" : {
            "type" : "string"
          }
        }
      },
      "Language" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "isoCode" : {
            "type" : "string"
          }
        }
      },
      "ResultListLanguage" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Language"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "LoyaltyCard" : {
        "required" : [ "bonusPoints", "stamps" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bonusPoints" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "lastActivity" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2024-02-06T09:40:21+01:00"
          },
          "stamps" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ResultListLoyaltyCard" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/LoyaltyCard"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "targetOrganizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "targetPointsOfSale" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "commandType" : {
            "type" : "string",
            "enum" : [ "MASTER_DATA_UPDATE" ]
          }
        }
      },
      "NumberRange" : {
        "type" : "object",
        "properties" : {
          "expression" : {
            "type" : "string"
          },
          "regularExpression" : {
            "type" : "string"
          },
          "function" : {
            "type" : "string",
            "enum" : [ "ADD_ACCOUNT_TRANSACTION", "ADD_SALE", "SET_RECEIPT_ORDER_NUMBER", "REDEEM_COUPON", "LOGIN_CASHIER", "OPEN_KORONA_RESOURCE_BOOKING", "SET_RECEIPT_CUSTOMER", "SET_RECEIPT_CUSTOMER_GROUP", "SET_RECEIPT_CUSTOMER_NUMBER", "LOGOUT_CASHIER", "OPEN_INVOICE", "SET_CASH_DRAWER", "ADD_SALE_SERIAL_NUMBER", "SHOW_BUTTON_LAYOUT", "OPEN_CUSTOMER_ORDER", "OPEN_DELIVERY_NOTE", "OPEN_QUOTE", "OPEN_RENTAL", "BOOK_INSTORE_EAN_PRICE_4", "BOOK_INSTORE_EAN_PRICE_5", "BOOK_INSTORE_EAN_PRICE_6", "SET_SALE_SELLER", "EXECUTE_EXTERNAL_SYSTEM_CALL", "SET_RECEIPT_CAMPAIGN_CARD_NUMBER", "BOOK_INSTORE_EAN_WEIGHT_5", "BOOK_INSTORE_EAN_WEIGHT_5_TWO_DECIMAL_PLACES", "BOOK_INSTORE_EAN_ACCOUNT_5", "BOOK_INSTORE_EAN_ACCOUNT_6", "DEBIT_VOUCHER", "HANDLE_VOUCHER", "REDEEM_EXTERNAL_COUPON", "SET_DIGITAL_RECEIPT_EMAIL", "SET_SALE_TAG" ]
          },
          "caseSensitive" : {
            "type" : "boolean"
          },
          "externalSystemCall" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "voucherConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "NumberRangeConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "numberRanges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NumberRange"
            }
          }
        }
      },
      "ResultListNumberRangeConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/NumberRangeConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "OrderPortalSupplier" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "standardTaxSector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "reducedTaxSector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "zeroTaxSector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "supplierId" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ResultListOrderPortalSupplier" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/OrderPortalSupplier"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DayRating" : {
        "type" : "object",
        "properties" : {
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "readOnly" : true
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "rating" : {
            "$ref" : "#/components/schemas/Rating"
          },
          "receipts" : {
            "type" : "integer",
            "format" : "int64"
          },
          "revenue" : {
            "type" : "number"
          },
          "visitors" : {
            "type" : "integer",
            "format" : "int64"
          },
          "weather" : {
            "$ref" : "#/components/schemas/Weather"
          }
        }
      },
      "Rating" : {
        "type" : "object",
        "properties" : {
          "assortment" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "employees" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Weather" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "temperature" : {
            "type" : "integer",
            "format" : "int32"
          },
          "temperatureUnit" : {
            "type" : "string",
            "enum" : [ "CELSIUS", "FAHRENHEIT", "KELVIN" ]
          }
        }
      },
      "OpeningHours" : {
        "type" : "object",
        "properties" : {
          "weekDay" : {
            "type" : "string",
            "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
          },
          "from" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "13:37:00"
          },
          "to" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "13:37:00"
          }
        }
      },
      "OrganizationalUnit" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressInformation"
          },
          "costCenter" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "economicZone" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "ehNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "identification" : {
            "$ref" : "#/components/schemas/CompanyIdentification"
          },
          "name" : {
            "type" : "string"
          },
          "openingHours" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OpeningHours"
            }
          },
          "parentOrganizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "priceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "warehouse" : {
            "type" : "boolean"
          },
          "orgFromOrder" : {
            "type" : "boolean"
          },
          "receiptShareSecret" : {
            "type" : "boolean"
          },
          "validAlternativePosProfiles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "alternativePriceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListDayRating" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/DayRating"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Amount" : {
        "properties" : {
          "actual" : {
            "type" : "number"
          },
          "lent" : {
            "type" : "number"
          },
          "maxLevel" : {
            "type" : "number"
          },
          "ordered" : {
            "type" : "number"
          },
          "reorderLevel" : {
            "type" : "number"
          }
        }
      },
      "ProductStock" : {
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "averagePurchasePrice" : {
            "type" : "number"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "warehouse" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "binLocation" : {
            "type" : "string"
          },
          "listed" : {
            "type" : "boolean"
          }
        },
        "description" : "If queried for an organizational unit, the warehouse reference here will not be set. If queried for a product, the product reference here will not be set"
      },
      "ResultListProductStock" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ProductStock"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "BaseNumberedResource" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          }
        }
      },
      "ResultListStockReceipt" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockReceipt"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "StockReceipt" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNumberedResource"
        }, {
          "type" : "object",
          "properties" : {
            "active" : {
              "type" : "boolean",
              "description" : "indicates whether the object is active for use or not",
              "readOnly" : true
            },
            "id" : {
              "type" : "string",
              "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
              "format" : "uuid"
            },
            "revision" : {
              "type" : "integer",
              "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
              "format" : "int64",
              "readOnly" : true
            },
            "number" : {
              "type" : "string",
              "description" : "number of the object, like it is set in backoffice"
            },
            "arrivalDate" : {
              "type" : "string",
              "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
              "format" : "date-time",
              "example" : "2018-11-22T09:40:21+01:00"
            },
            "bookingTime" : {
              "type" : "string",
              "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
              "format" : "date-time",
              "example" : "2018-11-22T09:40:21+01:00"
            },
            "bookingUser" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "bookingApiUser" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "cashier" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "createTime" : {
              "type" : "string",
              "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
              "format" : "date-time",
              "example" : "2018-11-22T09:40:21+01:00"
            },
            "createUser" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "customer" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "description" : {
              "type" : "string"
            },
            "dispatchNotification" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "itemsCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "organizationalUnit" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "partyInformation" : {
              "$ref" : "#/components/schemas/ProductTransferInvolvedPartyInformation"
            },
            "pointOfSale" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "productStockOrder" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "sourceOrganizationalUnit" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "supplier" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "comment" : {
              "type" : "string"
            },
            "customPriceChange" : {
              "type" : "number"
            },
            "ignorePurchasePrice" : {
              "type" : "boolean"
            },
            "status" : {
              "type" : "string",
              "readOnly" : true,
              "enum" : [ "BOOKED", "IN_PROGRESS" ]
            }
          }
        } ]
      },
      "ResultListOrganizationalUnit" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/OrganizationalUnit"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PaymentMethodCategory" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListPaymentMethodCategory" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodCategory"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PaymentMethod" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "allowedBalanceDifference" : {
            "type" : "number"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "forceCustomerNumber" : {
            "type" : "boolean"
          },
          "forcePrint" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "paymentService" : {
            "$ref" : "#/components/schemas/Service"
          },
          "printCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "useCashDrawer" : {
            "type" : "boolean"
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "attachPaymentTerminalDataToReceipt" : {
            "type" : "boolean"
          },
          "maxPaymentSum" : {
            "type" : "number"
          },
          "balance" : {
            "type" : "boolean"
          },
          "changeDue" : {
            "type" : "boolean"
          },
          "category" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "payout" : {
            "type" : "boolean"
          },
          "minimumReceiptAmount" : {
            "type" : "number"
          }
        }
      },
      "Service" : {
        "type" : "object",
        "properties" : {
          "parameter" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CASH", "MERCHANTWARE", "MERCURY", "KORONA_PREPAID", "CREDIT_AUTHORIZATION_TERMINAL" ]
          },
          "processingMode" : {
            "type" : "string",
            "enum" : [ "DEFAULT_PAYMENT_PROCESSING", "PRE_AUTH", "GENIUS", "WEB_KEYED", "WEB_SWIPED", "NONE" ]
          }
        }
      },
      "ResultListPaymentMethod" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethod"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PosButton" : {
        "type" : "object",
        "properties" : {
          "color" : {
            "type" : "string",
            "enum" : [ "BLUE", "CYAN", "GREEN", "MAGENTA", "NONE", "ORANGE", "RED", "YELLOW" ]
          },
          "column" : {
            "type" : "integer",
            "format" : "int32"
          },
          "row" : {
            "type" : "integer",
            "format" : "int32"
          },
          "functionSequence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosButtonFunction"
            }
          },
          "name" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string",
            "enum" : [ "ONE_BY_ONE", "TWO_BY_ONE", "ONE_BY_TWO", "TWO_BY_TWO" ]
          },
          "authorizationConditionCashierRole" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "authorizationConditionFourEyes" : {
            "type" : "boolean"
          }
        }
      },
      "PosButtonFunction" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "macro" : {
            "type" : "string",
            "enum" : [ "ADJUST_PAYMENT", "SELECT_ALL", "EXIT_APPLICATION", "APPLY_PAYMENT_TIP", "SHOW_PRODUCT_SEARCH", "TOGGLE_AUTO_RECEIPT_PRINT", "OPEN_RECEIPT_VIA_ORDER_NUMBER", "SHOW_RECEIPT_ARCHIVE", "COPY_TOTAL_TO_INPUT", "PRINT_TREAT_RECEIPT", "CANCEL_RECEIPT", "PARK_RECEIPT", "PRINT", "ENABLE_PRINT_PREVIEW", "DISABLE_PRINT_PREVIEW", "ENTER", "CLEAR_INPUT", "BACKSPACE", "MANUFACTURE", "BACKGROUND_IMAGE", "BALANCE", "BALANCE_POS", "OPEN_CASHDRAWER", "PRINT_POS_MONTH_REPORT", "PRINT_POS_REPORT", "PRINT_POS_WEEK_REPORT", "CASHIER_QUICK_CHANGE", "PRINT_CASHIER_REPORT", "CHANGE_CASHIER", "SHOW_KORONA_INFO", "COST_ACCOUNT", "CUSTOMER_GROUP", "DESELECT", "BIND_ITEMS", "ADD_FREE_INFO_TEXT", "REMOVE_INFO_TEXTS", "SPLIT_ITEMS", "TRANSFER_ITEMS", "ITEM_SEQUENCE", "ITEM_INFO_TEXT", "CHANGE_QUANTITY", "CHANGE_PRICE", "ITEM_DISCOUNT", "REOPEN_RECEIPT", "RETURN", "TOGGLE_QUICK_KEY_MODE", "SCROLL_UP", "SCROLL_DOWN", "SELECT", "VOID_ITEM", "VOID_RECEIPT", "FINISH_DAY", "KEY_0", "KEY_1", "KEY_2", "KEY_3", "KEY_4", "KEY_5", "KEY_6", "KEY_7", "KEY_8", "KEY_9", "KEY_COMMA", "KEY_PERIOD", "KEY_MULT", "KEY_MINUS", "SHOW_BUTTONLAYOUT", "TOTAL", "TOGGLE_SECTOR", "TOGGLE_SECTOR_DEFAULT", "TOGGLE_SECTOR_ALTERNATIV", "PAYMENT", "BIND_PAYMENTS", "RETRIEVE_MASTER_DATA", "SHOW_HANDHELD_MANAGER", "SHOW_TICKETCHECK", "SHOW_TABLEOVERVIEW", "SET_ORDER_NUMBER", "STOCK_RECEIPT", "INVENTORY_RECEIPT", "TIME_TRACKING", "SHOW_LABEL_PRINT_PAGE", "COPY_RECEIPT_DATA", "PRICE_INFO", "CHECK_PREPAID_ACCOUNT", "EVENT_SALES_PAGE", "EVENT_PRESALES_PAGE", "SET_CUSTOMER_NUMBER", "CUSTOMER_LOOKUP", "SHOW_CUSTOMER", "SHOW_RECEIPT_CUSTOMER", "REVISION", "PREPARATION_RECEIPT", "STOCK_RETURN", "PRINT_GIFT_RECEIPT", "SHOW_ITEM_INFO_TEXT_SELECTION", "SHOW_OPEN_STOCK_MANAGEMENT_RECEIPTS", "SAVE_STOCK_MANAGEMENT_RECEIPT", "PRODUCTTEXT_ALLERGENS", "PRODUCTTEXT_MANUAL", "PRODUCTTEXT_DESCRIPTION", "PRODUCTTEXT_INGREDIENTS", "PRODUCTTEXT_NUTRITIONAL_VALUE", "PRODUCTTEXT_CARE_INSTRUCTIONS", "PRODUCTTEXT_RECIPE", "PRODUCTTEXT_CERTIFICATE", "RESTART_POS", "SET_CUSTOMER_BY_NR", "CASHIER_PAUSE", "CASH_VOID", "CANCEL", "ZVT_ENDOFDAY", "ZVT_CLAIM", "ZVT_RELEASE", "CREDIT_AUTHORIZATION_TERMINAL_DIAGNOSIS", "CREDIT_AUTHORIZATION_TERMINAL_REPEAT_RECEIPT", "CREDIT_AUTHORIZATION_TERMINAL_INITIALZATION", "CREDIT_AUTHORIZATION_TERMINAL_CONFIGURATION", "CREDIT_AUTHORIZATION_TERMINAL_MAINTENANCE", "CREDIT_AUTHORIZATION_TERMINAL_EBT_BALANCE_CASH", "CREDIT_AUTHORIZATION_TERMINAL_EBT_BALANCE_FOODSTAMP", "CREATE_STORE_ORDERS", "LOAD_STORE_ORDERS", "CHANGE_BOOKING", "LIST_STOCKS_BY_PRODUCT", "FIND_BOOKING", "SET_RECEIPT_DISCOUNT_PERCENT", "SET_RECEIPT_DISCOUNT_SUBTRACTION", "BLOYAL_SNIPPET_FIND_CUSTOMER", "BLOYAL_SNIPPET_QUICK_SIGNUP", "BLOYAL_SNIPPET_APPLY_COUPON", "BLOYAL_SNIPPET_RECORD_VISIT", "BLOYAL_SNIPPET_VIEW_CUSTOMER", "BLOYAL_SNIPPET_CREATE_ORDER", "BLOYAL_SNIPPET_RETURN_ORDER", "BLOYAL_SNIPPET_CHECK_INVENTORY", "CLEAR_BUTTON_STATUS", "SWITCH_BUTTON_STATUS", "CROSS_SELLING", "TOGGLE_OSK", "LOAD_RECEIPT", "DEACTIVATE_OVERRIDE", "DENOMINATION_INPUT", "SWITCH_BLOYAL_STATE", "EXCHANGE_SALE", "RECEIPT_PRINT", "SHOW_RETURN_PAGE", "SHOW_RETURN_PAGE_WITH_CURRENT_RECEIPT", "CASH_CHECK", "ADVANCED_BOOKINGEDITING", "SHOW_PREAUTH_PAYMENTS", "SHOW_TAG_BUTTON_LAYOUT", "TARGET_PRICE_DISCOUNT", "APPLY_SPECIAL_OFFER", "SHOW_GODB_EXPORT", "SET_SERIAL", "CHANGE_ECONOMIC_ZONE", "CUSTOMER_ORDER_SEARCH", "CUSTOMER_ORDER_CREATE", "CUSTOMER_ORDER_EDIT", "ROUND_RECEIPT_TOTAL_DOWN", "SET_SALE_SELLER", "SWITCH_BATCH_PRINTING", "ACTIVATE_BATCH_PRINTING", "DEACTIVATE_BATCH_PRINTING", "DEACTIVATE_PRODUCER_PRINTING", "SET_PERCENTAGE_OF_RECEIPTTOTAL", "SHOW_PAYMENT_PAGE", "SET_COUPONING_CAMPAIGN_CARD", "EVENT_SALE", "EVENT_OVERVIEW_PRINT", "EVENT_OVERVIEW_SHOW", "CREATE_EVENT_RESOURCE", "KEY_UPPER_A", "KEY_UPPER_B", "KEY_UPPER_C", "KEY_UPPER_D", "KEY_UPPER_E", "KEY_UPPER_F", "KEY_UPPER_G", "KEY_UPPER_H", "KEY_UPPER_I", "KEY_UPPER_J", "KEY_UPPER_K", "KEY_UPPER_L", "KEY_UPPER_M", "KEY_UPPER_N", "KEY_UPPER_O", "KEY_UPPER_P", "KEY_UPPER_Q", "KEY_UPPER_R", "KEY_UPPER_S", "KEY_UPPER_T", "KEY_UPPER_U", "KEY_UPPER_V", "KEY_UPPER_W", "KEY_UPPER_X", "KEY_UPPER_Y", "KEY_UPPER_Z", "KEY_LOWER_A", "KEY_LOWER_B", "KEY_LOWER_C", "KEY_LOWER_D", "KEY_LOWER_E", "KEY_LOWER_F", "KEY_LOWER_G", "KEY_LOWER_H", "KEY_LOWER_I", "KEY_LOWER_J", "KEY_LOWER_K", "KEY_LOWER_L", "KEY_LOWER_M", "KEY_LOWER_N", "KEY_LOWER_O", "KEY_LOWER_P", "KEY_LOWER_Q", "KEY_LOWER_R", "KEY_LOWER_S", "KEY_LOWER_T", "KEY_LOWER_U", "KEY_LOWER_V", "KEY_LOWER_W", "KEY_LOWER_X", "KEY_LOWER_Y", "KEY_LOWER_Z", "RENTAL_SEARCH", "RENTAL_CREATE", "RENTAL_EDIT", "QUOTE_SEARCH", "QUOTE_CREATE", "QUOTE_EDIT", "DELIVERY_NOTE_SEARCH", "DELIVERY_NOTE_CREATE", "DELIVERY_NOTE_EDIT", "DEPOSIT_REFUNDMODE_SWITCH", "DEPOSIT_REFUNDMODE_ACTIVATE", "DEPOSIT_REFUNDMODE_DEACTIVATE", "RECORD_START_COMMAND_ID", "RECORT_END_COMMAND_ID", "ADD_SALEITEM_DISCOUNT", "ADD_CHANGE_CARRY_FORWARD", "ADD_AUTOMATIC_CHANGE_CARRY_FORWARD", "ADD_CHANGE_CARRY_FORWARD_DIFF", "ADD_AUTOMATIC_CHANGE_CARRY_FORWARD_DIFF", "CENTRAL_BALANCE", "CENTRAL_BALANCE_POS", "COMBINE_SALE_ITEMS", "ACTIVATE_COMBINE_SALE_ITEMS", "DEACTIVATE_COMBINE_SALE_ITEMS", "SWITCH_CONTAINER_MODE", "CONVERT_CONTAINER_TO_SINGLE_ITEM", "CONVERT_SINGLE_ITEM_TO_CONTAINER_BY_CAPACITY", "CONVERT_SINGLE_ITEM_TO_CONTAINER_BY_NUMBER", "EXTRACT_DEPOSIT_ITEMS", "REMOVE_SUB_PRODUCTS_FROM_CONTAINER", "ACTIVATE_MANDATORY_SIGNATURE_ON_RECEIPT", "DEACTIVATE_MANDATORY_SIGNATURE_ON_RECEIPT", "SWITCH_MANDATORY_SIGNATURE_ON_RECEIPT", "CREATE_VOUCHER", "REDEEM_VOUCHER", "CANCEL_VOUCHER", "SHOW_VOUCHER", "SET_RECEIPT_FINALIZATION_LOCK", "REMOVE_RECEIPT_FINALIZATION_LOCK", "TSE_SETUP_FORM", "SET_SALE_ITEM_SELECTION_MODE_SINGLE", "SET_SALE_ITEM_SELECTION_MODE_MULTI", "SET_DIGITAL_RECEIPT_EMAIL", "MACRO_CHANGE_ORG_ONCE_ON_RECEIPT", "MACRO_CHANGE_ORG_ON_RECEIPTS", "MACRO_CHANGE_PRICE_GROUP", "MACRO_REMOVE_ALL_COUPONS_FROM_RECEIPT", "UPLOAD_POS_JOURNAL", "CANCEL_SALE_IMMEDIATELY", "BARCODE_SCANNER_ACTIVATE", "BARCODE_SCANNER_DEACTIVATE", "BARCODE_SCANNER_SUCCESS_SIGNAL", "BARCODE_SCANNER_FAILURE_SIGNAL", "RETURN_ITEM", "RECEIPT_REVERSAL", "CHANGE_ECONOMIC_ZONE_FOR_ALL", "INVERT_INPUTLINE", "MACRO_CHANGE_PRICE_SHOW_NOTIFICATION", "SET_RECEIPT_PAYMENT_LOCK", "REMOVE_RECEIPT_PAYMENT_LOCK", "SET_SALE_ITEM_DISCOUNT_SUBTRACTION", "SUBTOTAL", "CLEAR_SALE_ITEM_SEQUENCE", "SET_ITEM_SEQUENCE_PRECONFIGURATION", "CLEAR_ITEM_SEQUENCE_PRECONFIGURATION", "CHANGE_GUEST_COUNT", "TOGGLE_ALTERNATIVE_PRICE_GROUP_ON_RECEIPT", "TRANSFER_RECEIPTS", "TAKE_OVER_RECEIPTS", "SPLIT_RECEIPT" ]
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "buttonLayout" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "infoText" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "customerGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "PRODUCT", "BUTTON_LAYOUT", "MACRO", "PAYMENT_METHOD", "CUSTOMER_GROUP", "ACCOUNT", "ITEM_SEQUENCE", "INFO_TEXT", "BUTTON_STATUS", "CHARACTER_STRING", "EXTERNAL_SYSTEM_CALL", "CHARACTER", "PRODUCT_TAG", "INTERNAL_SYSTEM_CALL" ]
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "buttonStatus" : {
            "type" : "string",
            "enum" : [ "NONE", "GREEN", "YELLOW", "RED", "HIDDEN" ]
          },
          "externalSystemCall" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "internalSystemCallType" : {
            "type" : "string",
            "enum" : [ "MESSAGE", "STOCK", "CUSTOMER", "CASHIER", "DAY_RATING", "BONUS_POINTS", "RESOLVE_UNKNOWN_PRODUCTS", "EVENTS", "EVENTS_VALIDATION", "CASHIER_SALES", "SQUARE_INITIALIZATION", "VOUCHER" ]
          }
        }
      },
      "PosButtonLayout" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "buttons" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosButton"
            }
          },
          "size" : {
            "type" : "string",
            "enum" : [ "SMALL", "BIG", "WIDE" ]
          }
        }
      },
      "ResultListPosButtonLayout" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PosButtonLayout"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PosPageLayout" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "string",
            "enum" : [ "RECEIPT_ARCHIVE", "BOOKING", "PAYMENT", "RECEIPTS", "BALANCE", "LOGIN" ]
          },
          "quickButtonLayout" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tabOne" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tabTwo" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tabThree" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "PosPageLayoutConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "pageLayouts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosPageLayout"
            }
          },
          "quickButtonMode" : {
            "type" : "boolean"
          },
          "totalButton" : {
            "$ref" : "#/components/schemas/PosButton"
          },
          "cancelPaymentButton" : {
            "$ref" : "#/components/schemas/PosButton"
          }
        }
      },
      "ResultListPosPageLayoutConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PosPageLayoutConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DeviceConfiguration" : {
        "type" : "object",
        "properties" : {
          "port" : {
            "type" : "string",
            "enum" : [ "SYSTEMPRINTER_DEFAULT", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "USB_COM1", "USB_COM2", "USB_COM3", "USB_COM4", "USB_COM5", "USB_COM6", "USB_COM7", "LPT1", "LPT2", "LPT3", "USB_LPT1", "USB_LPT2", "NETWORK", "COMMAND", "CASHDRAWER_DEAMON_WINDOWS", "CASHDRAWER_DEAMON_LINUX", "USB_ACM1", "USB_ACM2", "USB_ACM3", "USB_ACM4", "USB_ACM5", "USB_ACM6", "USB_ACM7" ]
          },
          "device" : {
            "type" : "string",
            "enum" : [ "ESC_PRINTER", "WINCOR_PRINTER", "EPSON_PRINTER", "TEXT_PRINTER", "DEFAULT_BARCODE_READER", "DSP800_DISPLAY", "ESC_CUSTOMER_DISPLAY", "CD7220_DISPLAY", "WINCOR_KEY_LOCK", "JB1300_KEY_LOCK", "ADDIMAT_KEY_LOCK", "ESC_DRAWER", "BOCA_PRINTER", "ZEBRA_PRINTER", "EPSON_TM_L90_PRINTER", "DEFAULT_ZVT_CREDIT_AUTHORIZATION_TERMINAL", "SOVATO_CUSTOMER_DISPLAY", "KORONA_CASH_DRAWER", "DEFAULT_PAX_CREDIT_AUTHORIZATION_TERMINAL", "ZEBRA_LP_2824_PRINTER", "HP_PRINTER", "ZEBRA_TTP_2000_PRINTER", "DEFAULT_SIX_CREDIT_AUTHORIZATION_TERMINAL", "SCANPAL2_BARCODE_SCANNER", "MAXIM_INTEGRATED_KEY_LOCK", "TOSHIBA_KEY_LOCK", "DEFAULT_VERIFONE_POINT_CREDIT_AUTHORIZATION_TERMINAL", "BA63_CUSTOMER_DISPLAY", "DEFAULT_PAYWORKS_CREDIT_AUTHORIZATION_TERMINAL", "DEFAULT_GENIUS_CREDIT_AUTHORIZATION_TERMINAL", "TOSHIBA_DISPLAY", "JARLTECH_CUSTOMER_DISPLAY", "DEFAULT_ECONDUIT_CREDIT_AUTHORIZATION_TERMINAL", "ADYEN_CREDIT_AUTHORIZATION_TERMINAL", "DEJAVOO_CREDIT_AUTHORIZATION_TERMINAL", "AURES_PRINTER", "BLOCKCHYP_CREDIT_AUTHORIZATION_TERMINAL", "VIVA_WALLET_CREDIT_AUTHORIZATION_TERMINAL", "CHECKLENS_LOSS_PREVENTION", "SQUARE_CREDIT_AUTHORIZATION_TERMINAL", "CCV_CREDIT_AUTHORIZATION_TERMINAL", "DATACAP_CREDIT_AUTHORIZATION_TERMINAL" ]
          },
          "baudRate" : {
            "type" : "string",
            "enum" : [ "LINUX_9600", "LINUX_19200", "WIN_9600", "WIN_19200", "NONE" ]
          },
          "initCommand" : {
            "type" : "string"
          },
          "initCommandVariable" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "portParameter" : {
            "type" : "string"
          },
          "portParameterVariable" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "defaultDevice" : {
            "type" : "boolean"
          },
          "deviceParameters" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeviceParameterItem"
            }
          },
          "productionTypeSettings" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductionTypeSetting"
            }
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "DeviceParameterItem" : {
        "type" : "object",
        "properties" : {
          "variable" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "parameterKey" : {
            "type" : "string"
          },
          "parameterValue" : {
            "type" : "string"
          }
        }
      },
      "PaymentServiceConfiguration" : {
        "type" : "object",
        "properties" : {
          "merchantSiteId" : {
            "type" : "string"
          },
          "merchantName" : {
            "type" : "string"
          },
          "merchantKey" : {
            "type" : "string"
          },
          "deviceUrl" : {
            "type" : "string"
          },
          "serviceType" : {
            "type" : "string",
            "enum" : [ "CASH", "DEFAULT_PAYMENT_TYPE", "MERCHANTWARE", "MERCURY", "KORONA_PREPAID", "CREDIT_AUTHORIZATION_TERMINAL" ]
          }
        }
      },
      "PosProfile" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "automaticCashierLogoutInterval" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "autoReceiptPrint" : {
            "type" : "boolean"
          },
          "forceClosedDrawer" : {
            "type" : "boolean"
          },
          "forceDrawerSelection" : {
            "type" : "boolean"
          },
          "guestCountRequired" : {
            "type" : "boolean"
          },
          "showReceiptPrintButtonOnOpenedDrawer" : {
            "type" : "boolean"
          },
          "maxBalanceAttempts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orderNumberRequired" : {
            "type" : "boolean"
          },
          "paymentServiceConfigurations" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentServiceConfiguration"
            }
          },
          "deviceProfileConfigurations" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeviceConfiguration"
            }
          },
          "tableServiceInterval" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "receiptLayoutConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "automaticEndOfDayInterval" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "centInput" : {
            "type" : "boolean"
          },
          "requirePaymentAmountInput" : {
            "type" : "boolean"
          },
          "kioskMode" : {
            "type" : "boolean"
          },
          "wideScreenLayout" : {
            "type" : "boolean"
          },
          "automaticPaymentFinalization" : {
            "type" : "boolean"
          },
          "autoResetQuickAccessPad" : {
            "type" : "boolean"
          },
          "easyRepeatProductEnabled" : {
            "type" : "boolean"
          },
          "externalSystemCallsOnBookReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnRejectReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnTotalReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnVoidReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnBookDeliveryNote" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnReverseReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnLoginCashier" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnLogoutCashier" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnBookFirstSale" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnOpenNonEmptyReceipt" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalSystemCallsOnReturn" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "designateBalanceDifference" : {
            "type" : "boolean"
          },
          "endOfDayReportEnabled" : {
            "type" : "boolean"
          },
          "unknownNumberAction" : {
            "type" : "string",
            "enum" : [ "CARRY_ON_WITH_MESSAGE", "HOLD_ON_WITH_DIALOG", "EXTERNAL_SYSTEM_CALL" ]
          },
          "unknownNumberExternalSystemCall" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "invoicingReceiptCopies" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cashierPasswordRequired" : {
            "type" : "boolean"
          },
          "posTheme" : {
            "type" : "string",
            "enum" : [ "CLASSIC", "FLAT" ]
          },
          "templateProduct" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "digitalReceipt" : {
            "type" : "boolean"
          },
          "digitalSignature" : {
            "type" : "boolean"
          },
          "automaticCustomerCreationFromCustomerOrder" : {
            "type" : "boolean"
          },
          "masterDataRefreshInterval" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "mandatoryReturnReason" : {
            "type" : "boolean"
          },
          "restrictToOneParkedReceipt" : {
            "type" : "boolean"
          },
          "automaticCashierLogoutLockCashier" : {
            "type" : "boolean"
          },
          "reportFile" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "showBankNotesForPaymentDenominationOnly" : {
            "type" : "boolean"
          },
          "endOfDayStatementAfterwards" : {
            "type" : "boolean"
          },
          "cancelParkedReceiptsOnEndOfDayStatement" : {
            "type" : "boolean"
          }
        }
      },
      "ProductionTypeSetting" : {
        "type" : "object",
        "properties" : {
          "productionType" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListPosProfile" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PosProfile"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "AccountSummary" : {
        "properties" : {
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "amount" : {
            "type" : "number"
          },
          "transactions" : {
            "type" : "number"
          }
        }
      },
      "CashierSummary" : {
        "properties" : {
          "cancelledItems" : {
            "$ref" : "#/components/schemas/CashierSummaryAmountCountData"
          },
          "cancelledReceipts" : {
            "$ref" : "#/components/schemas/CashierSummaryAmountCountData"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "receipts" : {
            "$ref" : "#/components/schemas/CashierSummaryAmountCountData"
          },
          "returns" : {
            "$ref" : "#/components/schemas/CashierSummaryAmountCountData"
          },
          "voidedReceipts" : {
            "$ref" : "#/components/schemas/CashierSummaryAmountCountData"
          }
        }
      },
      "CashierSummaryAmountCountData" : {
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "count" : {
            "type" : "number"
          }
        },
        "description" : "AmountCountData"
      },
      "CommodityGroupSummary" : {
        "properties" : {
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "discountAmount" : {
            "type" : "number"
          },
          "items" : {
            "type" : "number"
          },
          "revenue" : {
            "type" : "number"
          }
        }
      },
      "CustomerGroupSummary" : {
        "properties" : {
          "customerGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "discountAmount" : {
            "type" : "number"
          },
          "items" : {
            "type" : "number"
          },
          "revenue" : {
            "type" : "number"
          }
        }
      },
      "EndOfDayStatement" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "receiptCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "successfullyChecked" : {
            "type" : "boolean"
          },
          "summaries" : {
            "$ref" : "#/components/schemas/EndOfDayStatementSummary"
          },
          "zCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "result list"
      },
      "EndOfDayStatementSummary" : {
        "properties" : {
          "accounts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountSummary"
            }
          },
          "cashiers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CashierSummary"
            }
          },
          "commodityGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommodityGroupSummary"
            }
          },
          "customerGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CustomerGroupSummary"
            }
          },
          "payments" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentSummary"
            }
          },
          "taxes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxSummary"
            }
          }
        }
      },
      "PaymentSummary" : {
        "properties" : {
          "actualAmount" : {
            "type" : "number"
          },
          "expectedAmount" : {
            "type" : "number"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "TaxSummary" : {
        "properties" : {
          "netAmount" : {
            "type" : "number"
          },
          "salesTax" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "taxAmount" : {
            "type" : "number"
          }
        }
      },
      "AccountTransaction" : {
        "properties" : {
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "amount" : {
            "type" : "number"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "description" : {
            "type" : "string"
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "serialNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "AdditionalInfo" : {
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "CashierVerificationResult" : {
        "properties" : {
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "requirement" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "selectedOption" : {
            "type" : "string"
          },
          "failed" : {
            "type" : "boolean"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "type" : {
            "enum" : [ "AGE", "OK", "OPTION_SELECTION", "YES_NO" ]
          }
        }
      },
      "CouponPosition" : {
        "properties" : {
          "coupon" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "redeemed" : {
            "type" : "boolean"
          },
          "autoGenerated" : {
            "type" : "boolean"
          },
          "selectedByPromotions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "triggeredByPromotions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "couponNumber" : {
            "type" : "string"
          }
        }
      },
      "DigitalReceiptInfo" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "FiscalTransaction" : {
        "properties" : {
          "errorDescription" : {
            "type" : "string"
          },
          "failed" : {
            "type" : "boolean"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "firstProcessTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "fiscalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "number" : {
            "type" : "integer",
            "format" : "int64"
          },
          "printLink" : {
            "type" : "string"
          },
          "printQrCode" : {
            "type" : "string"
          },
          "printTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "processData" : {
            "type" : "string"
          },
          "processType" : {
            "type" : "string"
          },
          "signature" : {
            "type" : "string",
            "format" : "byte"
          },
          "signatureCounter" : {
            "type" : "integer",
            "format" : "int64"
          },
          "startTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "GeoLocation" : {
        "properties" : {
          "latitude" : {
            "type" : "number"
          },
          "longitude" : {
            "type" : "number"
          }
        }
      },
      "Payment" : {
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "transactionTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "transactionToken" : {
            "type" : "string"
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "prepaidCard" : {
            "$ref" : "#/components/schemas/PrepaidCard"
          },
          "inputAmount" : {
            "type" : "number"
          },
          "transactionId" : {
            "type" : "string"
          },
          "paymentTerminalReceipts" : {
            "items" : {
              "$ref" : "#/components/schemas/PaymentTerminalReceipt"
            }
          }
        }
      },
      "PaymentTerminalReceipt" : {
        "properties" : {
          "terminalReceiptPrintLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TerminalReceiptPrintLine"
            }
          },
          "terminalReceiptType" : {
            "enum" : [ "OTHER", "MERCHANT_RECEIPT", "CARDHOLDER_RECEIPT" ]
          }
        }
      },
      "PrepaidCard" : {
        "properties" : {
          "cardNumber" : {
            "type" : "string"
          },
          "cardHolder" : {
            "type" : "string"
          }
        }
      },
      "PromotionApplication" : {
        "properties" : {
          "promotion" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "iterations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountAmount" : {
            "type" : "number"
          }
        }
      },
      "Receipt" : {
        "description" : "result list",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseNumberedResource"
        }, {
          "type" : "object",
          "properties" : {
            "active" : {
              "type" : "boolean",
              "description" : "indicates whether the object is active for use or not",
              "readOnly" : true
            },
            "id" : {
              "type" : "string",
              "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
              "format" : "uuid"
            },
            "revision" : {
              "type" : "integer",
              "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
              "format" : "int64",
              "readOnly" : true
            },
            "number" : {
              "type" : "string",
              "description" : "number of the object, like it is set in backoffice"
            },
            "accountTransactions" : {
              "items" : {
                "$ref" : "#/components/schemas/AccountTransaction"
              }
            },
            "additionalInfo" : {
              "uniqueItems" : true,
              "items" : {
                "$ref" : "#/components/schemas/AdditionalInfo"
              }
            },
            "bookingTime" : {
              "type" : "string",
              "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
              "format" : "date-time",
              "example" : "2018-11-22T09:40:21+01:00"
            },
            "cancelled" : {
              "type" : "boolean"
            },
            "cashier" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "creationTime" : {
              "type" : "string",
              "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
              "format" : "date-time",
              "example" : "2018-11-22T09:40:21+01:00"
            },
            "currency" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "reversedReceipt" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "customer" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "customerGroup" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "depositAmount" : {
              "type" : "number"
            },
            "externalReferences" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "reversal" : {
              "type" : "boolean"
            },
            "fiscalTransactions" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FiscalTransaction"
              }
            },
            "geoLocation" : {
              "$ref" : "#/components/schemas/GeoLocation"
            },
            "guestCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "infoTexts" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "items" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ReceiptItem"
              }
            },
            "maxRevisions" : {
              "$ref" : "#/components/schemas/ReceiptMaxRevisions"
            },
            "orderNumber" : {
              "type" : "string"
            },
            "organizationalUnit" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "payments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Payment"
              }
            },
            "cashierVerificationResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CashierVerificationResult"
              }
            },
            "pointOfSale" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "priceGroup" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "revenue" : {
              "$ref" : "#/components/schemas/ReceiptRevenue"
            },
            "signature" : {
              "$ref" : "#/components/schemas/Signature"
            },
            "total" : {
              "$ref" : "#/components/schemas/ReceiptTotal"
            },
            "voided" : {
              "type" : "boolean"
            },
            "voidedItems" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/VoidedReceiptItem"
              }
            },
            "voidFiscalTransactions" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FiscalTransaction"
              }
            },
            "voucherTransactions" : {
              "type" : "array",
              "description" : "Deprecated, please use voucherTransactionReferences instead.",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/VoucherTransactionOld"
              }
            },
            "voucherTransactionReferences" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ModelReference"
              }
            },
            "warehouse" : {
              "$ref" : "#/components/schemas/ModelReference"
            },
            "zcounter" : {
              "type" : "integer",
              "format" : "int64"
            },
            "promotionApplications" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PromotionApplication"
              }
            },
            "couponPositions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CouponPosition"
              }
            },
            "digitalReceiptInfo" : {
              "$ref" : "#/components/schemas/DigitalReceiptInfo"
            }
          }
        } ]
      },
      "ReceiptItem" : {
        "properties" : {
          "attendance" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "description" : {
            "type" : "string"
          },
          "discounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Discount"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "indent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "manualPrice" : {
            "type" : "boolean"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "serialNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "recognitionNumber" : {
            "type" : "string",
            "description" : "the number referencing the product was typed/scanned to create the receipt item"
          },
          "type" : {
            "enum" : [ "PRODUCT", "VOUCHER" ]
          },
          "voucherTransaction" : {
            "$ref" : "#/components/schemas/VoucherTransactionOld"
          },
          "voucherTransactionReference" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "specialPriceConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "returnOriginalReceiptReference" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "returnReason" : {
            "$ref" : "#/components/schemas/ReceiptItemReturnReason"
          },
          "seller" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ReceiptItemReturnReason" : {
        "properties" : {
          "reasonText" : {
            "type" : "string"
          }
        }
      },
      "ReceiptMaxRevisions" : {
        "properties" : {
          "account" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cashier" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customer" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerGroup" : {
            "type" : "integer",
            "format" : "int64"
          },
          "organizationalUnit" : {
            "type" : "integer",
            "format" : "int64"
          },
          "salesTax" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ReceiptRevenue" : {
        "properties" : {
          "gross" : {
            "type" : "number"
          },
          "net" : {
            "type" : "number"
          }
        }
      },
      "ReceiptTotal" : {
        "properties" : {
          "gross" : {
            "type" : "number"
          },
          "net" : {
            "type" : "number"
          },
          "tax" : {
            "type" : "number"
          }
        }
      },
      "TerminalReceiptPrintLine" : {
        "properties" : {
          "terminalReceiptPrintLineFont" : {
            "enum" : [ "NORMAL", "BOLD" ]
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "VoidedReceiptItem" : {
        "properties" : {
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "indent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "readOnly" : true
      },
      "VoucherTransactionOld" : {
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "price" : {
            "type" : "number"
          },
          "transactionType" : {
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "user" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "voucher" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "voided" : {
            "type" : "boolean"
          },
          "voucherConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        },
        "description" : "Deprecated, please use voucherTransactionReferences instead.",
        "readOnly" : true,
        "deprecated" : true
      },
      "DeviceConfigurationVariableValue" : {
        "type" : "object",
        "properties" : {
          "deviceConfigurationVariable" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "DeviceInformation" : {
        "type" : "object",
        "properties" : {
          "appVersion" : {
            "type" : "string",
            "description" : "current version of paired app",
            "example" : "1.0"
          },
          "operatingSystem" : {
            "type" : "string",
            "description" : "name and version of the operation system",
            "example" : "iOS 11.1"
          }
        },
        "description" : "only for updating-purposes through PATCH, not shown on GET requests."
      },
      "FiscalUnitPreConfiguration" : {
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "type" : "string"
          },
          "apiSecret" : {
            "type" : "string"
          },
          "remoteUrl" : {
            "type" : "string"
          },
          "adminPin" : {
            "type" : "string"
          },
          "adminPuk" : {
            "type" : "string"
          },
          "timeAdminPin" : {
            "type" : "string"
          }
        }
      },
      "Pos" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "containerMode" : {
            "type" : "boolean",
            "description" : "Deprecated, please use containerSelection instead.",
            "readOnly" : true,
            "deprecated" : true
          },
          "containerSelection" : {
            "type" : "string",
            "enum" : [ "OFF", "ON", "BY_USER" ]
          },
          "contraAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "coupled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "coupledClientSystemInformation" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "couplingId" : {
            "type" : "string",
            "description" : "write only",
            "writeOnly" : true
          },
          "customerDisplayConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "defaultCustomerGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "defaultPaymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "deviceInformation" : {
            "$ref" : "#/components/schemas/DeviceInformation"
          },
          "entryGate" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "external" : {
            "type" : "boolean",
            "description" : "deprecated; use type instead",
            "deprecated" : true
          },
          "fiscalServiceType" : {
            "type" : "string",
            "enum" : [ "DE_TSE_FISKALY", "DE_TSE_SWISSBIT", "EFSTA", "NONE" ]
          },
          "fiscalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "fiscalUnitPreConfiguration" : {
            "$ref" : "#/components/schemas/FiscalUnitPreConfiguration"
          },
          "language" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "lastReceiptNumber" : {
            "type" : "string",
            "description" : "last receipt number - only shown if external=true and coupled=false; usable for client-side receipt counter.",
            "readOnly" : true
          },
          "lastZCount" : {
            "type" : "integer",
            "description" : "last zcount property - only shown if external=true and coupled=false; usable for client-side zcount.",
            "format" : "int64",
            "readOnly" : true
          },
          "layoutConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "name" : {
            "type" : "string"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "posProfile" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "printFooterLines" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "printHeaderLines" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "receiptInfoTexts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "receiptNumberPrefix" : {
            "type" : "string",
            "readOnly" : true
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tableOverview" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tipAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "useAlternativeSector" : {
            "type" : "boolean"
          },
          "warehouse" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "deviceConfigurationVariableValues" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DeviceConfigurationVariableValue"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "STANDARD", "EXTERNAL", "EXTERNAL_WEBSHOP", "TEMPORARY", "INVOICING", "EXPRESS", "SCO", "WEBSHOP", "MISC", "KORONA_POS_NEXT" ]
          }
        }
      },
      "PosBalance" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "balanceAttempts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "summaries" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosBalanceSummary"
            }
          },
          "summaryChangesets" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosBalanceSummaryChangeset"
            }
          },
          "items" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PosBalanceItem"
            }
          },
          "total" : {
            "$ref" : "#/components/schemas/PosBalanceTotal"
          },
          "transactionReceiptCode" : {
            "type" : "string"
          },
          "zCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "result list"
      },
      "PosBalanceItem" : {
        "properties" : {
          "currencyDenominationType" : {
            "enum" : [ "BANKNOTE", "COIN" ]
          },
          "total" : {
            "type" : "number"
          },
          "nominalValue" : {
            "type" : "number"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          }
        }
      },
      "PosBalanceSummary" : {
        "properties" : {
          "comment" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "total" : {
            "$ref" : "#/components/schemas/PosBalanceTotal"
          }
        }
      },
      "PosBalanceSummaryChangeset" : {
        "properties" : {
          "changeTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "newActual" : {
            "type" : "number"
          },
          "oldActual" : {
            "type" : "number"
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "user" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "PosBalanceTotal" : {
        "properties" : {
          "actual" : {
            "type" : "number"
          },
          "expected" : {
            "type" : "number"
          }
        }
      },
      "ResultListPosBalance" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PosBalance"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListEndOfDayStatement" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/EndOfDayStatement"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PosMaxNumbers" : {
        "properties" : {
          "lastReceiptNumber" : {
            "type" : "string"
          },
          "lastZCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastQuoteNumber" : {
            "type" : "string"
          },
          "lastRentalNumber" : {
            "type" : "string"
          },
          "lastCustomerOrderNumber" : {
            "type" : "string"
          },
          "lastDeliveryNoteNumber" : {
            "type" : "string"
          },
          "lastStoreOrderNumber" : {
            "type" : "string"
          },
          "lastPosBalanceTransactionCode" : {
            "type" : "string"
          },
          "lastStockAdjustmentNumber" : {
            "type" : "string"
          },
          "lastStockReceiptNumber" : {
            "type" : "string"
          },
          "lastInventoryReceiptNumber" : {
            "type" : "string"
          },
          "lastManufacturingNumber" : {
            "type" : "string"
          },
          "lastStockReturnNumber" : {
            "type" : "string"
          }
        }
      },
      "ResultListReceipt" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Receipt"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListPos" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Pos"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PriceGroup" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "name" : {
            "type" : "string"
          },
          "netPrices" : {
            "type" : "boolean"
          }
        }
      },
      "ResultListPriceGroup" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PriceGroup"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "DateInterval" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "example" : "2020-11-22"
          },
          "to" : {
            "type" : "string",
            "description" : "yyyy-MM-dd",
            "format" : "date",
            "example" : "2020-11-25"
          }
        }
      },
      "PriceRule" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "assortment" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "calculation" : {
            "$ref" : "#/components/schemas/PriceRuleCalculation"
          },
          "condition" : {
            "$ref" : "#/components/schemas/PriceRuleCondition"
          },
          "discountLevel" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "name" : {
            "type" : "string"
          },
          "priceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "validityPeriod" : {
            "$ref" : "#/components/schemas/PriceRuleValidityPeriod"
          }
        }
      },
      "PriceRuleCalculation" : {
        "type" : "object",
        "properties" : {
          "operand" : {
            "type" : "number"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "ADDITION", "DIVISION", "MULTIPLICATION", "PERCENT", "SUBSTITUTION", "SUBTRACTION" ]
          }
        }
      },
      "PriceRuleCondition" : {
        "type" : "object",
        "properties" : {
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "customerGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "minAmount" : {
            "type" : "number"
          },
          "positionType" : {
            "type" : "string",
            "enum" : [ "NONE", "PRODUCT", "PRODUCTS_OF_COMMODITY_GROUP", "PRODUCTS_WITH_TAG" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "saleTag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "PriceRuleTimeValidityRepetitionInterval" : {
        "type" : "object",
        "properties" : {
          "interval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DAILY", "MONTHLY", "WEEKLY" ]
          }
        }
      },
      "PriceRuleValidityPeriod" : {
        "type" : "object",
        "properties" : {
          "dateInterval" : {
            "$ref" : "#/components/schemas/DateInterval"
          },
          "repetitionInterval" : {
            "$ref" : "#/components/schemas/PriceRuleTimeValidityRepetitionInterval"
          },
          "timeOfDayInterval" : {
            "$ref" : "#/components/schemas/TimeOfDayInterval"
          }
        }
      },
      "TimeOfDayInterval" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "00:08:00"
          },
          "to" : {
            "type" : "string",
            "description" : "HH:mm:ss",
            "format" : "time",
            "example" : "00:17:00"
          }
        }
      },
      "ResultListPriceRule" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/PriceRule"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Price" : {
        "required" : [ "product" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "value" : {
            "type" : "number"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "productCode" : {
            "type" : "string"
          },
          "priceGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListPrice" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Price"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "MediaUrl" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          }
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "alternativeSector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "assortment" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "codes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductCode"
            }
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "conversion" : {
            "type" : "boolean"
          },
          "costs" : {
            "type" : "number"
          },
          "deactivated" : {
            "type" : "boolean"
          },
          "deposit" : {
            "type" : "boolean"
          },
          "descriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductDescription"
            }
          },
          "discountable" : {
            "type" : "boolean"
          },
          "image" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "itemSequence" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "lastPurchasePrice" : {
            "type" : "number"
          },
          "listed" : {
            "type" : "boolean"
          },
          "listedSince" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "maxPrice" : {
            "type" : "number",
            "example" : 9999.99
          },
          "minPrice" : {
            "type" : "number",
            "example" : -9999.99
          },
          "name" : {
            "type" : "string"
          },
          "packagingQuantity" : {
            "type" : "number"
          },
          "packagingRequired" : {
            "type" : "boolean"
          },
          "packagingUnit" : {
            "type" : "string",
            "enum" : [ "CUBIC_INCH", "CUBIC_METER", "FLUID_OUNCE", "GALLON_FL", "GRAM", "ONE_HUNDRED_METERS", "INCH", "KILOGRAM", "LITER", "CENTIMETER", "METER", "MILLILITER", "OUNCE", "POUND", "SQUARE_INCH", "SQUARE_METER", "PORTION", "PIECE", "CARTON" ]
          },
          "personalizationRequired" : {
            "type" : "boolean"
          },
          "priceChangable" : {
            "type" : "boolean"
          },
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductPrice"
            }
          },
          "printTicketsSeparately" : {
            "type" : "boolean"
          },
          "productionType" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "recommendedRetailPrice" : {
            "type" : "number"
          },
          "relatedProducts" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "serialNumberRequired" : {
            "type" : "boolean"
          },
          "subproductPresentation" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "HIDE_ALL", "HIDE_PRICES", "HIDE_QUANTITIES" ]
          },
          "subproducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSubproduct"
            }
          },
          "supplierPrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSupplierPrice"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "ticketDefinition" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "trackInventory" : {
            "type" : "boolean"
          },
          "mediaUrls" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MediaUrl"
            }
          },
          "quantityDenomination" : {
            "type" : "number"
          },
          "specialPrices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductSpecialPrice"
            }
          },
          "verificationRequirements" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "salesLock" : {
            "type" : "boolean"
          },
          "customProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "containers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductContainer"
            }
          },
          "containerCapacity" : {
            "type" : "number"
          },
          "independentSubarticleDiscounts" : {
            "type" : "boolean"
          },
          "listedOrganizationalUnits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "stockReturnUnsellable" : {
            "type" : "boolean"
          }
        }
      },
      "ProductContainer" : {
        "type" : "object",
        "properties" : {
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductPrice"
            }
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "description" : {
            "type" : "string"
          },
          "defaultContainer" : {
            "type" : "boolean"
          }
        }
      },
      "ProductDescription" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ALLERGENS", "MANUAL", "DESCRIPTION", "ORDER_TEXT", "RECEIPT_TEXT", "INGREDIENTS", "NUTRITIONAL_VALUE", "CARE_INSTRUCTIONS", "RECIPE", "CERTIFICATE", "WARRANTY_TEXT", "INFO_URL", "ADDITIVES", "LABEL_TEXT", "MANUFACTURER" ]
          },
          "text" : {
            "type" : "string"
          },
          "language" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ProductSpecialPrice" : {
        "required" : [ "specialPriceConfiguration", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "number"
          },
          "quantityFrom" : {
            "type" : "number"
          },
          "specialPriceConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ProductSubproduct" : {
        "type" : "object",
        "properties" : {
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductPrice"
            }
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "PRODUCT", "TAG" ]
          }
        }
      },
      "ResultListProduct" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ProductionType" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "method" : {
            "type" : "string",
            "enum" : [ "PRINT", "PRINT_MERGED", "TICKET_ACTIVATE", "TICKET_PRINT", "TICKET_ACTIVATE_PRINT", "TICKET_VALIDATE_PRINT", "KORONA_PREPAID", "KORONA_PREPAID_PRINT", "EXTERNAL_SYSTEM_CALL", "VOUCHER_PRINT", "EXTERNAL_SYSTEM_CALL_WITH_FEEDBACK", "TICKET_VALIDATE" ]
          },
          "trigger" : {
            "type" : "string",
            "enum" : [ "AFTER_PAYMENT", "IMMEDIATELY", "AFTER_BOOKING", "BEFORE_PAYMENT", "MANUAL_ONLY", "AFTER_PAYMENT_ONLY" ]
          },
          "subProducer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "externalSystemCall" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListProductionType" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ProductionType"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Promotion" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "benefit" : {
            "$ref" : "#/components/schemas/PromotionBenefit"
          },
          "bonuspoint" : {
            "$ref" : "#/components/schemas/PromotionBonuspoint"
          },
          "coupon" : {
            "$ref" : "#/components/schemas/PromotionCoupon"
          },
          "deactivated" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "receiptInfoTexts" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "stamp" : {
            "$ref" : "#/components/schemas/PromotionStamp"
          },
          "bonusItems" : {
            "$ref" : "#/components/schemas/PromotionBonusItems"
          },
          "triggers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PromotionTrigger"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "BONUSPOINTS_CASHIER", "BONUSPOINTS_CUSTOMER", "COUPON_DISCOUNT", "IMMEDIATE_DISCOUNT", "STAMPS", "BONUS_ITEMS" ]
          },
          "validity" : {
            "$ref" : "#/components/schemas/PromotionValidity"
          }
        }
      },
      "PromotionBenefit" : {
        "type" : "object",
        "properties" : {
          "common" : {
            "$ref" : "#/components/schemas/PromotionBenefitCommonDiscount"
          },
          "extended" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscount"
          },
          "layer" : {
            "$ref" : "#/components/schemas/PromotionLayer"
          },
          "reduceProductAmount" : {
            "$ref" : "#/components/schemas/PromotionBenefitReduceProductAmount"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "COMMON", "EXTENDED", "REDUCE_PRODUCT_AMOUNT", "GRADUATED_DISCOUNT" ]
          }
        },
        "description" : "required if `type`=COUPON_DISCOUNT|IMMEDIATE_DISCOUNT"
      },
      "PromotionBenefitBonusItemsPositionSelectionFilter" : {
        "type" : "object",
        "properties" : {
          "couponNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "COMMODITY_GROUP", "COUPON_NUMBER", "NONE", "PRODUCT", "SECTOR", "TAG" ]
          },
          "commodityGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "products" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "sectors" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "not" : {
            "type" : "boolean"
          }
        }
      },
      "PromotionBenefitCommonDiscount" : {
        "type" : "object",
        "properties" : {
          "applianceTarget" : {
            "type" : "string",
            "enum" : [ "PRODUCT", "PRODUCTS_OF_COMMODITY_GROUP", "PRODUCTS_WITH_TAG" ]
          },
          "applianceType" : {
            "type" : "string",
            "enum" : [ "CHEAPEST_TARGET", "EACH_TARGET", "EQUAL_ON_EACH_TARGET", "MOST_EXPENSIVE_TARGET", "RECEIPT" ]
          },
          "targetCommodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "targetProduct" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "targetTag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DISCOUNT", "FIXED_PRICE" ]
          },
          "unitType" : {
            "type" : "string",
            "enum" : [ "FIXED", "PERCENTAGE" ]
          },
          "value" : {
            "type" : "number"
          },
          "maxIterations" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PromotionBenefitExtendedDiscount" : {
        "type" : "object",
        "properties" : {
          "discountCalculations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountDiscountCalculation"
            }
          },
          "positionSelectionCriteria" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteria"
          }
        }
      },
      "PromotionBenefitExtendedDiscountDiscountCalculation" : {
        "type" : "object",
        "properties" : {
          "operand" : {
            "type" : "number"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "EQUALS", "MINUS", "PERCENTAGE" ]
          },
          "positionSelectionCriteria" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteria"
          },
          "reference" : {
            "type" : "string",
            "enum" : [ "RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION" ]
          },
          "sumReference" : {
            "type" : "string",
            "enum" : [ "RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION" ]
          },
          "receiptDiscount" : {
            "type" : "boolean"
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelection" : {
        "type" : "object",
        "properties" : {
          "countAmount" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCountAmount"
          },
          "discountAmount" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCountAmount"
          },
          "filter" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionFilter"
          },
          "sort" : {
            "type" : "string",
            "enum" : [ "IRRELEVANT", "PRICE_ASCENDING", "PRICE_DESCENDING" ]
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelectionCountAmount" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ALL", "AMOUNT", "PRICE", "UP_TO_AMOUNT", "UP_TO_PRICE" ]
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelectionCriteria" : {
        "type" : "object",
        "properties" : {
          "amountRange" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRange"
          },
          "maxIterations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "priceRange" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRange"
          },
          "selections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelection"
            }
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRange" : {
        "type" : "object",
        "properties" : {
          "max" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRangeValueComperator"
          },
          "min" : {
            "$ref" : "#/components/schemas/PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRangeValueComperator"
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelectionCriteriaMinMaxRangeValueComperator" : {
        "type" : "object",
        "properties" : {
          "exclusive" : {
            "type" : "boolean"
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "PromotionBenefitExtendedDiscountPositionSelectionFilter" : {
        "type" : "object",
        "properties" : {
          "couponNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "COMMODITY_GROUP", "COUPON_NUMBER", "NONE", "PRODUCT", "SECTOR", "TAG" ]
          },
          "commodityGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "products" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "sectors" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "tags" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "not" : {
            "type" : "boolean"
          }
        }
      },
      "PromotionBenefitReduceProductAmount" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "reductionValue" : {
            "type" : "number"
          }
        }
      },
      "PromotionBonusItems" : {
        "type" : "object",
        "properties" : {
          "bonusItems" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PromotionBonusItemsBonusItem"
            }
          },
          "positionSelectionCriteria" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCriteria"
          }
        },
        "description" : "required if `type`=BONUS_ITEMS"
      },
      "PromotionBonusItemsBonusItem" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "operand" : {
            "type" : "number"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "EQUALS", "MINUS", "PERCENTAGE" ]
          }
        }
      },
      "PromotionBonusItemsPositionSelection" : {
        "type" : "object",
        "properties" : {
          "countAmount" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCountAmount"
          },
          "filter" : {
            "$ref" : "#/components/schemas/PromotionBenefitBonusItemsPositionSelectionFilter"
          }
        }
      },
      "PromotionBonusItemsPositionSelectionCountAmount" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ALL", "AMOUNT", "PRICE", "UP_TO_AMOUNT", "UP_TO_PRICE" ]
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "PromotionBonusItemsPositionSelectionCriteria" : {
        "type" : "object",
        "properties" : {
          "amountRange" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCriteriaMinMaxRange"
          },
          "maxIterations" : {
            "type" : "integer",
            "format" : "int32"
          },
          "priceRange" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCriteriaMinMaxRange"
          },
          "selections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelection"
            }
          }
        }
      },
      "PromotionBonusItemsPositionSelectionCriteriaMinMaxRange" : {
        "type" : "object",
        "properties" : {
          "max" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCriteriaMinMaxRangeValueComperator"
          },
          "min" : {
            "$ref" : "#/components/schemas/PromotionBonusItemsPositionSelectionCriteriaMinMaxRangeValueComperator"
          }
        }
      },
      "PromotionBonusItemsPositionSelectionCriteriaMinMaxRangeValueComperator" : {
        "type" : "object",
        "properties" : {
          "exclusive" : {
            "type" : "boolean"
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "PromotionBonuspoint" : {
        "type" : "object",
        "properties" : {
          "creation" : {
            "$ref" : "#/components/schemas/PromotionBonuspointCreation"
          },
          "redemption" : {
            "$ref" : "#/components/schemas/PromotionBonuspointRedemption"
          }
        },
        "description" : "required if `type`=BONUSPOINTS_CUSTOMER|BONUSPOINTS_CASHIER"
      },
      "PromotionBonuspointCreation" : {
        "type" : "object",
        "properties" : {
          "bonuspoints" : {
            "type" : "integer",
            "format" : "int32"
          },
          "layer" : {
            "$ref" : "#/components/schemas/PromotionLayer"
          },
          "partialRevenueForBonuspoints" : {
            "type" : "number"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FIXED", "PARTIAL" ]
          }
        }
      },
      "PromotionBonuspointRedemption" : {
        "type" : "object",
        "properties" : {
          "fixedDiscount" : {
            "$ref" : "#/components/schemas/PromotionBonuspointRedemptionFixedDiscount"
          },
          "percentageDiscount" : {
            "$ref" : "#/components/schemas/PromotionBonuspointRedemptionPercentageDiscount"
          },
          "tagDiscount" : {
            "$ref" : "#/components/schemas/PromotionBonuspointRedemptionTagDiscount"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FIXED_DISCOUNT", "PERCENTAGE_DISCOUNT", "TAG_DISCOUNT" ]
          }
        }
      },
      "PromotionBonuspointRedemptionFixedDiscount" : {
        "type" : "object",
        "properties" : {
          "bonuspoints" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountValue" : {
            "type" : "number"
          }
        }
      },
      "PromotionBonuspointRedemptionPercentageDiscount" : {
        "type" : "object",
        "properties" : {
          "bonuspoints" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountValue" : {
            "type" : "number"
          }
        }
      },
      "PromotionBonuspointRedemptionTagDiscount" : {
        "type" : "object",
        "properties" : {
          "bonuspoints" : {
            "type" : "integer",
            "format" : "int32"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "PromotionCoupon" : {
        "type" : "object",
        "properties" : {
          "codeType" : {
            "type" : "string",
            "enum" : [ "BARCODE", "CODEWORD", "QR_CODE" ]
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "text" : {
            "type" : "string"
          },
          "validity" : {
            "$ref" : "#/components/schemas/PromotionCouponValidity"
          }
        },
        "description" : "required if `type`=COUPON_DISCOUNT"
      },
      "PromotionCouponValidity" : {
        "type" : "object",
        "properties" : {
          "dateInterval" : {
            "$ref" : "#/components/schemas/DateInterval"
          },
          "daysAfterPurchaseInterval" : {
            "$ref" : "#/components/schemas/PromotionCouponValidityDaysAfterPurchaseInterval"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DATE_INTERVAL", "DAYS_AFTER_PURCHASE_INTERVAL" ]
          }
        }
      },
      "PromotionCouponValidityDaysAfterPurchaseInterval" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "integer",
            "format" : "int32"
          },
          "to" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "required if `type`=DAYS_AFTER_PURCHASE_INTERVAL"
      },
      "PromotionLayer" : {
        "type" : "object",
        "properties" : {
          "exclusive" : {
            "type" : "boolean"
          },
          "layer" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "PromotionStamp" : {
        "type" : "object",
        "properties" : {
          "layer" : {
            "$ref" : "#/components/schemas/PromotionLayer"
          },
          "stampAmount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stampConfiguration" : {
            "type" : "string",
            "enum" : [ "FIVE_PLUS_ONE", "TEN_PLUS_ONE" ]
          }
        },
        "description" : "required if `type`=STAMPS"
      },
      "PromotionTrigger" : {
        "type" : "object",
        "properties" : {
          "customerGroups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "customers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "externalCouponNumber" : {
            "type" : "string",
            "description" : "ignored if `type`=STAMPS"
          },
          "productAmount" : {
            "$ref" : "#/components/schemas/PromotionTriggerProductAmountCondition"
          },
          "receiptProductAmount" : {
            "$ref" : "#/components/schemas/PromotionTriggerReceiptProductAmountCondition"
          },
          "receiptRevenue" : {
            "$ref" : "#/components/schemas/PromotionTriggerReceiptRevenueCondition"
          },
          "tagAmount" : {
            "$ref" : "#/components/schemas/PromotionTriggerTagAmountCondition"
          },
          "tagRevenue" : {
            "$ref" : "#/components/schemas/PromotionTriggerTagRevenueCondition"
          }
        }
      },
      "PromotionTriggerProductAmountCondition" : {
        "type" : "object",
        "properties" : {
          "equalityCondition" : {
            "type" : "string",
            "enum" : [ "EQUAL", "GREATER_OR_EQUAL" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "value" : {
            "type" : "number"
          }
        },
        "description" : "ignored if promotion `type`=STAMPS"
      },
      "PromotionTriggerReceiptProductAmountCondition" : {
        "type" : "object",
        "properties" : {
          "equalityCondition" : {
            "type" : "string",
            "enum" : [ "GREATER_OR_EQUAL" ]
          },
          "value" : {
            "type" : "number"
          }
        },
        "description" : "ignored if promotion `type`=STAMPS"
      },
      "PromotionTriggerReceiptRevenueCondition" : {
        "type" : "object",
        "properties" : {
          "equalityCondition" : {
            "type" : "string",
            "enum" : [ "EQUAL", "GREATER_OR_EQUAL" ]
          },
          "value" : {
            "type" : "number"
          }
        },
        "description" : "ignored if promotion `type`=STAMPS"
      },
      "PromotionTriggerTagAmountCondition" : {
        "type" : "object",
        "properties" : {
          "equalityCondition" : {
            "type" : "string",
            "enum" : [ "EQUAL", "GREATER_OR_EQUAL" ]
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "value" : {
            "type" : "number"
          }
        }
      },
      "PromotionTriggerTagRevenueCondition" : {
        "type" : "object",
        "properties" : {
          "equalityCondition" : {
            "type" : "string",
            "enum" : [ "EQUAL", "GREATER_OR_EQUAL" ]
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "value" : {
            "type" : "number"
          }
        },
        "description" : "ignored if promotion `type`=STAMPS"
      },
      "PromotionValidity" : {
        "type" : "object",
        "properties" : {
          "dateInterval" : {
            "$ref" : "#/components/schemas/DateInterval"
          },
          "daysOfMonth" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "daysOfWeek" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
            }
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "timeOfDayInterval" : {
            "$ref" : "#/components/schemas/TimeOfDayInterval"
          },
          "orgSelectionMode" : {
            "type" : "string",
            "enum" : [ "INCLUDE", "EXCLUDE" ]
          },
          "posTypes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "STANDARD", "EXTERNAL", "EXTERNAL_WEBSHOP", "TEMPORARY", "INVOICING", "EXPRESS", "SCO", "WEBSHOP", "MISC", "KORONA_POS_NEXT" ]
            }
          }
        }
      },
      "ResultListPromotion" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Promotion"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ReceiptLayoutConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "showProductNumbers" : {
            "type" : "boolean"
          },
          "showReceiptNumberBarcode" : {
            "type" : "boolean"
          },
          "footerLogo" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "footerLogoNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "headerLogo" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "headerLogoNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "showRecommendedRetailPriceThreshold" : {
            "type" : "integer",
            "format" : "int32"
          },
          "itemGrouping" : {
            "type" : "string",
            "enum" : [ "ASSORTMENT", "COMMODITY_GROUP", "NONE" ]
          },
          "showReducedReceiptInformation" : {
            "type" : "boolean"
          },
          "showReducedCustomerInformation" : {
            "type" : "boolean"
          },
          "showRemovedItems" : {
            "type" : "boolean"
          },
          "showTotalDiscount" : {
            "type" : "boolean"
          },
          "showPricesOnDeliveryNotes" : {
            "type" : "boolean"
          },
          "showTaxName" : {
            "type" : "boolean"
          },
          "depositSummary" : {
            "type" : "boolean"
          },
          "showArticleCount" : {
            "type" : "boolean"
          },
          "fiscalDataFormat" : {
            "type" : "string",
            "enum" : [ "TEXT", "QR_CODE", "TEXT_AND_QR_CODE" ]
          },
          "showOptionalFiscalData" : {
            "type" : "boolean",
            "description" : "use new property fiscalDataFormat, value corresponds to the following mapping false equals TEXT & true equals TEXT_AND_QR_CODE",
            "deprecated" : true
          }
        }
      },
      "ResultListReceiptLayoutConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ReceiptLayoutConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Rental" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "orderNumber" : {
            "type" : "string"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RentalItem"
            }
          }
        }
      },
      "RentalItem" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "serialNumbers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "commodityGroup" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "indent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "$ref" : "#/components/schemas/TotalPrice"
          },
          "infoTexts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ResultListRental" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Rental"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ReportFile" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "data" : {
            "type" : "string",
            "format" : "byte"
          },
          "fileName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "XREPORT", "ARTICLE_TEXT_LABEL", "PRICE_LABEL", "SHELF_LABEL", "XREPORT_RECEIPT_POS" ]
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListReportFile" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/ReportFile"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "RevenueAccount" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "taxId" : {
            "type" : "string"
          }
        }
      },
      "ResultListRevenueAccount" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/RevenueAccount"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "SalesTax" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "dsfinvkTaxKey" : {
            "type" : "string",
            "enum" : [ "AVERAGE", "AVERAGE_OTHER_CASES", "FULL", "NON_TAXABLE", "REDUCED", "TAX_FREE", "UNKNOWN" ]
          },
          "economicZone" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "included" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "rates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SalesTaxRate"
            }
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "SalesTaxRate" : {
        "type" : "object",
        "properties" : {
          "rate" : {
            "type" : "number"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "ResultListSalesTax" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/SalesTax"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Sector" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "salesTaxes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SectorSalesTaxItem"
            }
          },
          "revenueAccounts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SectorRevenueAccountItem"
            }
          }
        }
      },
      "SectorRevenueAccountItem" : {
        "type" : "object",
        "properties" : {
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "economicZone" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "SectorSalesTaxItem" : {
        "type" : "object",
        "properties" : {
          "index" : {
            "type" : "integer",
            "format" : "int32"
          },
          "salesTax" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListSector" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Sector"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "SpecialPriceConfiguration" : {
        "required" : [ "validFrom", "validTo" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "validFrom" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "validTo" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          }
        }
      },
      "ResultListSpecialPriceConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/SpecialPriceConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "SpecialPrice" : {
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "type" : "number",
            "description" : "required"
          },
          "quantityFrom" : {
            "type" : "number"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "FinancialAccountingData" : {
        "properties" : {
          "day" : {
            "type" : "string"
          },
          "costCenter" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "type" : {
            "enum" : [ "PAYMENTS", "ACCOUNT_TRANSACTIONS", "SALES", "SALE_DISCOUNTS" ]
          },
          "typeDescription" : {
            "type" : "string"
          },
          "taxId" : {
            "type" : "string"
          },
          "value" : {
            "type" : "number"
          }
        },
        "description" : "result list"
      },
      "StatisticListFinancialAccountingData" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/FinancialAccountingData"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "PeriodRevenueDataRevenueData" : {
        "properties" : {
          "start" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "end" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "results" : {
            "$ref" : "#/components/schemas/RevenueData"
          }
        }
      },
      "RevenueData" : {
        "properties" : {
          "netValue" : {
            "type" : "number"
          },
          "grossValue" : {
            "type" : "number"
          },
          "averageNetValue" : {
            "type" : "number"
          },
          "averageGrossValue" : {
            "type" : "number"
          },
          "customersTotal" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "StatisticRevenueData" : {
        "properties" : {
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "currentPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataRevenueData"
          },
          "previousPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataRevenueData"
          }
        }
      },
      "PeriodRevenueDataMapStringRevenueData" : {
        "properties" : {
          "start" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "end" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "results" : {
            "additionalProperties" : {
              "$ref" : "#/components/schemas/RevenueData"
            }
          }
        }
      },
      "StatisticMapStringRevenueData" : {
        "properties" : {
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "currentPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataMapStringRevenueData"
          },
          "previousPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataMapStringRevenueData"
          }
        }
      },
      "StatisticListSectorData" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StatisticSectorData"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "StatisticSectorData" : {
        "properties" : {
          "netValue" : {
            "type" : "number"
          },
          "grossValue" : {
            "type" : "number"
          },
          "taxValue" : {
            "type" : "number"
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "year" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "description" : "SectorData"
      },
      "PeriodRevenueDataListStatisticTopSeller" : {
        "properties" : {
          "start" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "end" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "results" : {
            "items" : {
              "$ref" : "#/components/schemas/StatisticTopSeller"
            }
          }
        }
      },
      "StatisticListTopSeller" : {
        "properties" : {
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "currentPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataListStatisticTopSeller"
          },
          "previousPeriod" : {
            "$ref" : "#/components/schemas/PeriodRevenueDataListStatisticTopSeller"
          }
        }
      },
      "StatisticTopSeller" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx). recommended to use for linking purposes. will never change.",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "name, like it is set in backoffice"
          },
          "number" : {
            "type" : "string",
            "description" : "number, like it is set in backoffice"
          },
          "grossAmount" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "number"
          }
        },
        "description" : "TopSeller"
      },
      "StockAdjustmentItem" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "reason" : {
            "$ref" : "#/components/schemas/StockAdjustmentItemReason"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          }
        }
      },
      "StockAdjustmentItemReason" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "BREAKAGE", "EXPIRED_SHELF_LIFE", "OTHER", "THEFT", "PERSONAL_USE", "TRANSFER" ]
          }
        }
      },
      "StockAdjustment" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingApiUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "bookingUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "externalId" : {
            "type" : "string"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "production" : {
            "type" : "boolean"
          },
          "reason" : {
            "type" : "string"
          },
          "receiptNumber" : {
            "type" : "string"
          },
          "warehouse" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }
      },
      "ResultListStockAdjustmentItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockAdjustmentItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListStockAdjustment" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockAdjustment"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "StockOrderItem" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "supplierItemNumber" : {
            "type" : "string"
          },
          "productNumber" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "number"
          },
          "containerSize" : {
            "type" : "number"
          },
          "itemPrice" : {
            "type" : "number"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "deliveryDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "receivedQuantity" : {
            "type" : "number"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          }
        }
      },
      "StockOrder" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "bookingApiUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "bookingUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "createUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "deposit" : {
            "type" : "number"
          },
          "description" : {
            "type" : "string"
          },
          "expectedFromDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "expectedToDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "finalized" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StockOrderItem"
            }
          },
          "itemsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "partyInformation" : {
            "$ref" : "#/components/schemas/ProductTransferInvolvedPartyInformation"
          },
          "pickupDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "shippingCondition" : {
            "type" : "string"
          },
          "shippingSupplierInformation" : {
            "type" : "string"
          },
          "sourceOrganizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "specialOfferCode" : {
            "type" : "string"
          },
          "storeOrder" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "status" : {
            "type" : "string",
            "readOnly" : true,
            "enum" : [ "BOOKED", "IN_PROGRESS" ]
          }
        }
      },
      "ResultListStockOrderItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockOrderItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListStockOrder" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockOrder"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "StockReceiptItem" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/StockReceiptItemAmount"
          },
          "identification" : {
            "$ref" : "#/components/schemas/StockReceiptItemIdentification"
          },
          "ignorePurchasePrice" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "integer",
            "format" : "int32",
            "readOnly" : true
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "purchasePrice" : {
            "$ref" : "#/components/schemas/StockReceiptItemPurchasePrice"
          },
          "revision" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "shelfLife" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "StockReceiptItemAmount" : {
        "type" : "object",
        "properties" : {
          "expected" : {
            "type" : "number"
          },
          "received" : {
            "type" : "number"
          }
        }
      },
      "StockReceiptItemIdentification" : {
        "type" : "object",
        "properties" : {
          "buyer" : {
            "type" : "string"
          },
          "productCode" : {
            "type" : "string"
          },
          "supplier" : {
            "type" : "string"
          }
        }
      },
      "StockReceiptItemPurchasePrice" : {
        "type" : "object",
        "properties" : {
          "actual" : {
            "type" : "number"
          },
          "old" : {
            "type" : "number",
            "readOnly" : true
          }
        }
      },
      "ResultListStockReceiptItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StockReceiptItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "StoreOrderItem" : {
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "quantity" : {
            "type" : "number"
          },
          "supplier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "sourceOrganizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "StoreOrder" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "processTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "targetOrganizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "itemsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerOrder" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "pickupDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ResultListStoreOrderItem" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StoreOrderItem"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListStoreOrder" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/StoreOrder"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Supplier" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "additionalInformation" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Data"
          },
          "contact" : {
            "$ref" : "#/components/schemas/SupplierContact"
          },
          "contactPerson" : {
            "$ref" : "#/components/schemas/SupplierContactPerson"
          },
          "customerNumber" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "payment" : {
            "$ref" : "#/components/schemas/SupplierPaymentInformation"
          },
          "returnAddress" : {
            "$ref" : "#/components/schemas/Data"
          },
          "deliveryConditions" : {
            "type" : "string"
          }
        }
      },
      "SupplierContact" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "website" : {
            "type" : "string"
          }
        }
      },
      "SupplierContactPerson" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "fax" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "mobile" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "salutation" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          }
        }
      },
      "SupplierPaymentInformation" : {
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string"
          },
          "bank" : {
            "type" : "string"
          },
          "bankNumber" : {
            "type" : "string"
          },
          "bic" : {
            "type" : "string"
          },
          "creditorIdentifier" : {
            "type" : "string"
          },
          "currency" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "iban" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "SupplierPaymentMethod",
            "enum" : [ "INVOICE", "PREPAYMENT", "CASH_ON_DELIVERY", "DIRECT_DEBIT" ]
          },
          "minimumOrderValue" : {
            "type" : "number"
          }
        }
      },
      "ResultListSupplier" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Supplier"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Tag" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ResultListTag" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Admission" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "type" : "integer",
            "format" : "int32"
          },
          "total" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Interval" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "to" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "TicketDefinition" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "activationDelayAfterPurchase" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "countStatistically" : {
            "type" : "boolean"
          },
          "entryGates" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "entrySignal" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "possibleAdmissions" : {
            "$ref" : "#/components/schemas/Admission"
          },
          "reEntryLock" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "validityPeriodAfterActivation" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "validityPeriodAfterEntrance" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "validityPeriodDaily" : {
            "$ref" : "#/components/schemas/Interval"
          },
          "validityPeriodTotal" : {
            "$ref" : "#/components/schemas/Interval"
          }
        }
      },
      "ResultListTicketDefinition" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/TicketDefinition"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListTicket" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Ticket"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "Ticket" : {
        "properties" : {
          "entryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "personalization" : {
            "$ref" : "#/components/schemas/TicketPersonalization"
          },
          "ticketNumber" : {
            "type" : "string"
          },
          "duplicate" : {
            "type" : "boolean"
          },
          "creationDate" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "locked" : {
            "type" : "boolean"
          },
          "lockedTo" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        },
        "description" : "result list"
      },
      "TimeTrackingEntity" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "paidTime" : {
            "type" : "boolean"
          }
        }
      },
      "ResultListTimeTrackingEntity" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/TimeTrackingEntity"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "TimeTrackingEntry" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "timeStamp" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "organizationalUnit" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "timeTrackingEntity" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListTimeTrackingEntry" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/TimeTrackingEntry"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "UserRole" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "name" : {
            "type" : "string"
          },
          "permissions" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "EXPORT", "MANAGE_CONTRACT", "MANAGE_FRANCHISE_RELATIONSHIP", "CREATE_ACCOUNT", "DELETE_ACCOUNT", "EDIT_ACCOUNT", "LIST_ACCOUNT", "CREATE_ADDITIONALRECEIPTINFOTYPE", "DELETE_ADDITIONALRECEIPTINFOTYPE", "EDIT_ADDITIONALRECEIPTINFOTYPE", "LIST_ADDITIONALRECEIPTINFOTYPE", "CREATE_PRODUCT", "EDIT_PRODUCT", "EDIT_PRODUCTNUMBER", "DELETE_PRODUCT", "LIST_PRODUCT", "EDIT_PRODUCT_LISTED", "LIST_PRODUCT_PURCHASE_PRICES", "EDIT_STORE_PRICES", "CREATE_ASSORTMENT", "DELETE_ASSORTMENT", "EDIT_ASSORTMENT", "LIST_ASSORTMENT", "CREATE_CASHIER", "DELETE_CASHIER", "EDIT_CASHIER", "LIST_CASHIER", "CREATE_COMMODITYGROUP", "DELETE_COMMODITYGROUP", "EDIT_COMMODITYGROUP", "LIST_COMMODITYGROUP", "CREATE_COUPONINGACTION", "DELETE_COUPONINGACTION", "EDIT_COUPONINGACTION", "LIST_COUPONINGACTION", "CREATE_CURRENCY", "DELETE_CURRENCY", "EDIT_CURRENCY", "LIST_CURRENCY", "CREATE_CUSTOMERGROUP", "DELETE_CUSTOMERGROUP", "EDIT_CUSTOMERGROUP", "LIST_CUSTOMERGROUP", "CREATE_DATAEXCHANGEENTRY", "DELETE_DATAEXCHANGEENTRY", "EDIT_DATAEXCHANGEENTRY", "LIST_DATAEXCHANGEENTRY", "SHOW_API_DATAEXCHANGEENTRIES", "EDIT_DISCOUNT_LEVEL_CONFIGURATION", "CREATE_INFOTEXT", "DELETE_INFOTEXT", "EDIT_INFOTEXT", "LIST_INFOTEXT", "CREATE_INVENTORY", "DELETE_INVENTORY", "EDIT_INVENTORY", "LIST_INVENTORY", "CREATE_ITEMSEQUENCE", "DELETE_ITEMSEQUENCE", "EDIT_ITEMSEQUENCE", "LIST_ITEMSEQUENCE", "CREATE_LANGUAGE", "DELETE_LANGUAGE", "EDIT_LANGUAGE", "LIST_LANGUAGE", "EDIT_NUMBERRANGES", "CREATE_PRICEGROUP", "DELETE_PRICEGROUP", "EDIT_PRICEGROUP", "LIST_PRICEGROUP", "CREATE_PRICERULE", "DELETE_PRICERULE", "EDIT_PRICERULE", "LIST_PRICERULE", "CREATE_SECTOR", "DELETE_SECTOR", "EDIT_SECTOR", "LIST_SECTOR", "CREATE_PRODUCER", "DELETE_PRODUCER", "EDIT_PRODUCER", "LIST_PRODUCER", "CREATE_ENTRYGATE", "DELETE_ENTRYGATE", "EDIT_ENTRYGATE", "LIST_ENTRYGATE", "CREATE_EVENT", "DELETE_EVENT", "EDIT_EVENT", "LIST_EVENT", "CREATE_TICKETDESCRIPTION", "DELETE_TICKETDESCRIPTION", "EDIT_TICKETDESCRIPTION", "LIST_TICKETDESCRIPTION", "CREATE_EXTERNAL_TICKET_CONFIGURATION", "DELETE_EXTERNAL_TICKET_CONFIGURATION", "EDIT_EXTERNAL_TICKET_CONFIGURATION", "LIST_EXTERNAL_TICKET_CONFIGURATION", "CREATE_REVENUEDESTINATION", "DELETE_REVENUEDESTINATION", "LIST_REVENUEDESTINATION", "EDIT_REVENUEDESTINATION", "CREATE_POS", "DELETE_POS", "EDIT_POS", "LIST_POS", "CREATE_EXTERNAL_SYSTEM_CALL", "DELETE_EXTERNAL_SYSTEM_CALL", "EDIT_EXTERNAL_SYSTEM_CALL", "LIST_EXTERNAL_SYSTEM_CALL", "CREATE_POSPROFILE", "DELETE_POSPROFILE", "EDIT_POSPROFILE", "LIST_POSPROFILE", "CREATE_BUTTONLAYOUT", "DELETE_BUTTONLAYOUT", "EDIT_BUTTONLAYOUT", "LIST_BUTTONLAYOUT", "CREATE_POSPAGELAYOUTCONFIGURATION", "DELETE_POSPAGELAYOUTCONFIGURATION", "EDIT_POSPAGELAYOUTCONFIGURATION", "LIST_POSPAGELAYOUTCONFIGURATION", "CREATE_ORG", "DELETE_ORG", "EDIT_ORG", "LIST_ORG", "CREATE_PAYMENTMETHOD", "DELETE_PAYMENTMETHOD", "EDIT_PAYMENTMETHOD", "LIST_PAYMENTMETHOD", "CREATE_USER", "DELETE_USER", "EDIT_USER", "LIST_USER", "EDIT_USER_ORGS", "CREATE_USERROLE", "DELETE_USERROLE", "EDIT_USERROLE", "LIST_USERROLE", "CREATE_CASHIERROLE", "DELETE_CASHIERROLE", "EDIT_CASHIERROLE", "LIST_CASHIERROLE", "CREATE_SALESTAX", "DELETE_SALESTAX", "EDIT_SALESTAX", "LIST_SALESTAX", "CREATE_ECONOMICZONE", "DELETE_ECONOMICZONE", "EDIT_ECONOMICZONE", "LIST_ECONOMICZONE", "CREATE_TABLEOVERVIEW", "DELETE_TABLEOVERVIEW", "LIST_TABLEOVERVIEW", "EDIT_TABLEOVERVIEW", "CREATE_VOUCHERCONFIGURATION", "DELETE_VOUCHERCONFIGURATION", "LIST_VOUCHERCONFIGURATION", "EDIT_VOUCHERCONFIGURATION", "CREATE_VOUCHERTRANSACTION", "DELETE_VOUCHERTRANSACTION", "LIST_VOUCHERTRANSACTION", "EDIT_VOUCHERTRANSACTION", "CREATE_TAG", "DELETE_TAG", "EDIT_TAG", "LIST_TAG", "CREATE_REVENUEACCOUNT", "DELETE_REVENUEACCOUNT", "EDIT_REVENUEACCOUNT", "LIST_REVENUEACCOUNT", "CREATE_COSTCENTER", "DELETE_COSTCENTER", "EDIT_COSTCENTER", "LIST_COSTCENTER", "CREATE_CONTRAACCOUNT", "DELETE_CONTRAACCOUNT", "EDIT_CONTRAACCOUNT", "LIST_CONTRAACCOUNT", "MANAGE_INVENTORY", "VIEW_INVENTORY", "BALANCE_EVALUATION", "RECEIPT_LIST", "CORRECT_PURCHASE_PRICE", "BALANCE_LIST", "EDIT_POS_BALANCE", "CREATE_CUSTOMER", "DELETE_CUSTOMER", "EDIT_CUSTOMER", "LIST_CUSTOMER", "CREATE_SUPPLIER", "DELETE_SUPPLIER", "EDIT_SUPPLIER", "LIST_SUPPLIER", "MANAGE_SENDREPORTTASK", "CREATE_STOCKADJUSTMENT", "DELETE_STOCKADJUSTMENT", "EDIT_STOCKADJUSTMENT", "LIST_STOCKADJUSTMENT", "CREATE_STOCK_RETURN", "DELETE_STOCK_RETURN", "EDIT_STOCK_RETURN", "LIST_STOCK_RETURN", "CREATE_STOCKORDER", "DELETE_STOCKORDER", "EDIT_STOCKORDER", "LIST_STOCKORDER", "CREATE_STOCKORDERTEMPLATE", "DELETE_STOCKORDERTEMPLATE", "EDIT_STOCKORDERTEMPLATE", "LIST_STOCKORDERTEMPLATE", "CREATE_STOREORDER", "DELETE_STOREORDER", "EDIT_STOREORDER", "LIST_STOREORDER", "CREATE_STOREORDERTEMPLATE", "DELETE_STOREORDERTEMPLATE", "EDIT_STOREORDERTEMPLATE", "LIST_STOREORDERTEMPLATE", "CREATE_STOREORDERCOLLECTION", "DELETE_STOREORDERCOLLECTION", "EDIT_STOREORDERCOLLECTION", "LIST_STOREORDERCOLLECTION", "CREATE_DISPATCHNOTIFICATION", "DELETE_DISPATCHNOTIFICATION", "EDIT_DISPATCHNOTIFICATION", "LIST_DISPATCHNOTIFICATION", "CREATE_STOCKRECEIPT", "DELETE_STOCKRECEIPT", "EDIT_STOCKRECEIPT", "LIST_STOCKRECEIPT", "CREATE_TIMETRACKINGENTITY", "DELETE_TIMETRACKINGENTITY", "EDIT_TIMETRACKINGENTITY", "LIST_TIMETRACKINGENTITY", "CREATE_RECEIPTLAYOUTCONFIGURATION", "DELETE_RECEIPTLAYOUTCONFIGURATION", "EDIT_RECEIPTLAYOUTCONFIGURATION", "LIST_RECEIPTLAYOUTCONFIGURATION", "CREATE_ORDERCYCLE", "DELETE_ORDERCYCLE", "EDIT_ORDERCYCLE", "LIST_ORDERCYCLE", "CREATE_PREPAIDCARD", "DELETE_PREPAIDCARD", "EDIT_PREPAIDCARD", "LIST_PREPAIDCARD", "CREATE_CAMPAIGNCARD", "DELETE_CAMPAIGNCARD", "EDIT_CAMPAIGNCARD", "LIST_CAMPAIGNCARD", "CREATE_CUSTOMER_DISPLAY_CONFIGURATION", "DELETE_CUSTOMER_DISPLAY_CONFIGURATION", "EDIT_CUSTOMER_DISPLAY_CONFIGURATION", "LIST_CUSTOMER_DISPLAY_CONFIGURATION", "DASHBOARD_REVENUE_EVALUATIONS", "ORGANIZATIONAL_UNIT_TREND_REPORT", "COMMODITYGROUP_STATISTIC", "HOURREVENUE_STATISTIC", "DAYREVENUE_STATISTIC", "HOURRECEIPTAMOUNT_STATISTIC", "DAYOFWEEKCUSTOMER_STATISTIC", "HOURCUSTOMER_STATISTIC", "POS_STATISTIC", "CASHIER_STATISTIC", "PAYMENT_METHOD_STATISTIC", "TOPSELLER_STATISTIC", "MOSTPOPULAR_STATISTIC", "PRODUCT_PERFORMANCE_STATISTIC", "WAREHOUSE_STATISTIC", "WAREHOUSE_REPORT", "CUSTOMERGROUP_STATISTIC", "CUSTOMER_STATISTIC", "STOCK_HISTORY_STATISTIC", "STOCK_RETURN_RATE", "STOCK_RETURN_REPORT", "ADDITIONAL_RECEIPT_INFO_REPORT", "PRODUCT_REPORT", "BONJOURNAL_REPORT", "POSTING_JOURNAL_REPORT", "DETACHEDPRODUCT_REPORT", "CASHIER_REPORT", "CASHIER_REVENUE_REPORT", "SELLER_REVENUE_REPORT", "CASHIERBALANCEDEVIATION_REPORT", "POS_REPORT", "ORGANIZATIONALUNIT_REPORT", "TAG_REPORT", "CASHIER_COMISSION_REPORT", "ORG_COMISSION_REPORT", "TAX_REPORT", "SECTOR_REPORT", "SERIAL_NUMBER_REPORT", "TIMETRACKING_REPORT", "PRODUCT_CUSTOMER_REPORT", "SLOW_SELLER_REPORT", "TOP_SELLER_REPORT", "DISCOUNT_REASONS_REPORT", "DISCOUNT_REPORT", "COMMODITYGROUP_REPORT", "ACCOUNT_TRANSACTIONS", "CUSTOMERGROUP_REPORT", "PAYMENT_METHOD_REPORT", "REVENUE_DESTINATION_REPORT", "CUSTOMER_ABC_REPORT", "CUSTOMER_SALES", "CUSTOMER_PRODUCT_REPORT", "PREPAID_CARDS_REPORT", "PREPAID_TRANSACTIONS_REPORT", "SUPPLIER_PRODUCTS_REPORT", "PRODUCTS_PER_WEEKDAY_REPORT", "KEY_PERFORMANCE_REPORT", "MANAGEMENT_REPORT", "MOVEMENT_REPORT", "ABCANALYSIS_REPORT", "SUPPLIER_ANALYSIS_REPORT", "SLOW_SELLER_RATIO_REPORT", "TOP_SELLER_RATIO_REPORT", "ORGANIZATIONALUNIT_TWOPOINTZERO_REPORT", "ORGANIZATIONALUNIT_COMPARISON_REPORT", "HIERARCHICALCOMMODITYGROUP_REPORT", "SUPPLIER_STOCKRECEIPT_REPORT", "INTERNAL_TRANSFER_REPORT", "SUPPLIER_SALES_REPORT", "SHELF_LIFE_SIMPLE_REPORT", "SHELF_LIFE_ADVANCED_REPORT", "COMPARISON_REPORT", "SALES_PRICE_REPORT", "PRODUCTION_REPORT", "CAMPAIGN_CARD_REPORT", "POSBALANCESUMMARY_REPORT", "DELIVERYNOTESUMMARY_REPORT", "DIFFERENCE_CHECK_REPORT", "STOCK_RECEIPT_DISCREPANCY_REPORT", "DAYRATING_REPORT", "VOID_REPORT", "CREDIT_CARD_CONSOLIDATION_REPORT", "PAYMENT_REPORT", "SERVICE_PROVISION_REVENUE_REPORT", "SERVICE_PROVISION_DISTINCTION_REPORT", "VOUCHER_REPORT", "VOUCHER_CARD_REPORT", "VOUCHER_TRANSACTION_REPORT", "VOUCHER_TRANSACTION_CUSTOMER_REPORT", "SALES_RETURN_REASONS_REPORT", "FAILED_FISCALIZATIONS_REPORT", "PREPAID_TRANSACTIONS_CUSTOMERS_REPORT", "STORE_PRICE_REPORT", "COUPONING_ACTION_REPORT", "DELIVERY_NOTE_REPORT", "RETAIL_AND_PURCHASE_PRICE_REPORT", "PURCHASE_PRICE_CHANGE_REPORT", "INVENTORY_ORDER_REPORT", "CANCELLATION_REPORT", "REVENUE_BY_HOUR_REPORT", "STOCK_VALUATION_REPORT", "PRICE_HISTORY_REPORT", "CREATE_IMAGE", "DELETE_IMAGE", "LIST_IMAGE", "CREATE_REPORT_FILE", "EDIT_REPORT_FILE", "DELETE_REPORT_FILE", "LIST_REPORT_FILE", "MANAGE_STATIONERY", "CREATE_QUOTE", "DELETE_QUOTE", "EDIT_QUOTE", "LIST_QUOTE", "CREATE_RENTAL", "DELETE_RENTAL", "EDIT_RENTAL", "LIST_RENTAL", "CREATE_INVOICE", "DELETE_INVOICE", "EDIT_INVOICE", "LIST_INVOICE", "CREATE_DELIVERY_NOTE", "DELETE_DELIVERY_NOTE", "EDIT_DELIVERY_NOTE", "LIST_DELIVERY_NOTE", "CREATE_CUSTOMER_ORDER", "DELETE_CUSTOMER_ORDER", "EDIT_CUSTOMER_ORDER", "LIST_CUSTOMER_ORDER", "CREATE_CUSTOMER_ORDER_TEMPLATE", "DELETE_CUSTOMER_ORDER_TEMPLATE", "EDIT_CUSTOMER_ORDER_TEMPLATE", "LIST_CUSTOMER_ORDER_TEMPLATE", "CREATE_CASH_JOURNAL", "DELETE_CASH_JOURNAL", "EDIT_CASH_JOURNAL", "LIST_CASH_JOURNAL", "INSTANT_ORDER", "ENTRY_REPORT", "LIST_TICKETS", "EDIT_TICKETS", "CREATE_MESSAGE", "DELETE_MESSAGE", "EDIT_MESSAGE", "LIST_MESSAGE", "CREATE_DEVICE_CONFIGURATION_VARIABLE", "DELETE_DEVICE_CONFIGURATION_VARIABLE", "EDIT_DEVICE_CONFIGURATION_VARIABLE", "LIST_DEVICE_CONFIGURATION_VARIABLE", "LIST_WAREHOUSE", "SHOW_INVENTORY_EXPENSES", "SHOW_INVENTORY_VALUE", "ALLOW_KORONA_INTEGRATION_LOGIN", "CREATE_FISCAL_UNIT", "DELETE_FISCAL_UNIT", "EDIT_FISCAL_UNIT", "LIST_FISCAL_UNIT", "CREATE_SPECIAL_PRICE_CONFIGURATION", "DELETE_SPECIAL_PRICE_CONFIGURATION", "EDIT_SPECIAL_PRICE_CONFIGURATION", "LIST_SPECIAL_PRICE_CONFIGURATION", "CREATE_VERIFICATION_REQUIREMENT", "DELETE_VERIFICATION_REQUIREMENT", "EDIT_VERIFICATION_REQUIREMENT", "LIST_VERIFICATION_REQUIREMENT", "CREATE_MASTER_DATA_PUSH", "CREATE_EXTERNAL_FORM", "DELETE_EXTERNAL_FORM", "EDIT_EXTERNAL_FORM", "LIST_EXTERNAL_FORM" ]
            }
          }
        }
      },
      "ResultListUserRole" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/UserRole"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "alias" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "userRole" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "organizationalUnits" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelReference"
            }
          },
          "createTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "lastLogin" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          }
        }
      },
      "ResultListUser" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "VoucherConfiguration" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DEPOSIT", "GOODS", "VALUE" ]
          },
          "validityPeriod" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "strictValidity" : {
            "type" : "boolean"
          },
          "sector" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "followUpProducts" : {
            "$ref" : "#/components/schemas/VoucherConfigurationFollowUpProducts"
          },
          "singleUse" : {
            "type" : "boolean"
          },
          "requiresSerialNumber" : {
            "type" : "boolean"
          },
          "productionType" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "revenueAccount" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "creditAmount" : {
            "type" : "number"
          },
          "account" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "name" : {
            "type" : "string"
          },
          "discount" : {
            "$ref" : "#/components/schemas/VoucherConfigurationDiscountCalculation"
          },
          "requiresPersonalization" : {
            "type" : "boolean"
          }
        }
      },
      "VoucherConfigurationDiscountCalculation" : {
        "type" : "object",
        "properties" : {
          "operator" : {
            "type" : "string",
            "enum" : [ "MINUS", "PERCENTAGE" ]
          },
          "operand" : {
            "type" : "number"
          },
          "layer" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "VoucherConfigurationFollowUpProducts" : {
        "type" : "object",
        "properties" : {
          "priceTransfer" : {
            "type" : "boolean"
          },
          "product" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "tag" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        }
      },
      "ResultListVoucherConfiguration" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/VoucherConfiguration"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "VoucherTransaction" : {
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "voided" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "type" : {
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "pointOfSale" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "cashier" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "receiptNumber" : {
            "type" : "string"
          },
          "bookingTime" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "voucher" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "receipt" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "receiptItem" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "amount" : {
            "type" : "number"
          },
          "user" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "comment" : {
            "type" : "string"
          },
          "price" : {
            "type" : "number"
          },
          "externalReferences" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "deliveryNote" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "deliveryNoteItem" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "invoiceItem" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "apiUser" : {
            "$ref" : "#/components/schemas/ModelReference"
          }
        },
        "description" : "result list"
      },
      "Voucher" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "indicates whether the object is active for use or not",
            "readOnly" : true
          },
          "id" : {
            "type" : "string",
            "description" : "global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
            "format" : "uuid"
          },
          "revision" : {
            "type" : "integer",
            "description" : "the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.",
            "format" : "int64",
            "readOnly" : true
          },
          "number" : {
            "type" : "string",
            "description" : "number of the object, like it is set in backoffice"
          },
          "amount" : {
            "type" : "number",
            "readOnly" : true
          },
          "customer" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "voucherConfiguration" : {
            "$ref" : "#/components/schemas/ModelReference"
          },
          "createdOn" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "validTo" : {
            "type" : "string",
            "description" : "yyyy-MM-dd'T'HH:mm:ssXXX",
            "format" : "date-time",
            "example" : "2018-11-22T09:40:21+01:00"
          },
          "locked" : {
            "type" : "boolean",
            "readOnly" : true
          }
        }
      },
      "ResultListVoucherTransaction" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/VoucherTransaction"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      },
      "ResultListVoucher" : {
        "required" : [ "currentPage", "links", "pagesTotal", "results", "resultsOfPage", "resultsTotal" ],
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "number of the current page, starting from 1",
            "format" : "int32"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "navigation links (previous, self, next)"
          },
          "pagesTotal" : {
            "type" : "integer",
            "description" : "pages count total",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "description" : "result list",
            "items" : {
              "$ref" : "#/components/schemas/Voucher"
            }
          },
          "resultsOfPage" : {
            "type" : "integer",
            "description" : "result count of the current page",
            "format" : "int32"
          },
          "resultsTotal" : {
            "type" : "integer",
            "description" : "result count total",
            "format" : "int32"
          },
          "maxRevision" : {
            "type" : "integer",
            "description" : "highest revision for this data type",
            "format" : "int64"
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "jsonSchemaDialect" : "https://spec.openapis.org/oas/3.1/dialect/base"
}